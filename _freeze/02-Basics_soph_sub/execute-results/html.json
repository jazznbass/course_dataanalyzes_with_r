{
  "hash": "f9c8018446593fa27c47ec7da0cb7b38",
  "result": {
    "markdown": "---\ntitle: \"R Basic Concepts: <br>Subsetting\"\nformat: revealjs\n---\n\n\n\n\n# Subsetting {background-image=\"img/bg-h1-3.jpg\"}\n\nSelecting elements of a data structure.\n\n## Selecting elements with square brackets {.build}\n\nBy providing a number within square brackets, the respective element is selected from a vector:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames <- c(\"Sheldon\", \"Leonard\", \"Penny\", \"Amy\")\nnames[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Sheldon\"\n```\n:::\n:::\n\n\nWhen you provide a vector of numbers, multiple elements are selected\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames[c(1,4)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Sheldon\" \"Amy\"    \n```\n:::\n:::\n\n\n##\n\nYou can even change the order or repeat elements:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames[c(4, 1, 1)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Amy\"     \"Sheldon\" \"Sheldon\"\n```\n:::\n:::\n\n\nWith negative numbers, columns are dropped:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames[-1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Leonard\" \"Penny\"   \"Amy\"    \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnames[c(-1, -3)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Leonard\" \"Amy\"    \n```\n:::\n:::\n\n\n\n## Task {background-image=\"img/bg-task.png\"}\n\nTake the vector\\\n`names <- c(\"Sheldon\", \"Leonard\", \"Penny\", \"Amy\")`\\\nand reorder it to get the following result:\\\n`[1] \"Sheldon\" \"Amy\"     \"Sheldon\" \"Amy\"     \"Leonard\" \"Penny\"`\n\n\n[**:-)**]{style=\"color: red;\"}\n\n\n\n## Task - solution {background-image=\"img/bg-task.png\"}\n\nTake the vector\\\n`names <- c(\"Sheldon\", \"Leonard\", \"Penny\", \"Amy\")`\\\nand reorder it to get the following result:\\\n`[1] \"Sheldon\" \"Amy\"     \"Sheldon\" \"Amy\"     \"Leonard\" \"Penny\"`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(1, 4, 1, 4, 2, 3)\nnew_order <- names[x]\nnew_order\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Sheldon\" \"Amy\"     \"Sheldon\" \"Amy\"     \"Leonard\" \"Penny\"  \n```\n:::\n:::\n\n\n## Subsetting data frames\n\nFirstly, we create an example data frame:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudy <- data.frame(\n  sen    = c(0, 1, 0, 1, 0, 1),\n  gender = c(\"M\", \"M\", \"F\", \"M\", \"F\", \"F\"),\n  age    = c(12, 13, 11, 10, 11, 14),\n  IQ     = c(90, 85, 90, 87, 99, 89)\n)\nstudy\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| sen|gender | age| IQ|\n|---:|:------|---:|--:|\n|   0|M      |  12| 90|\n|   1|M      |  13| 85|\n|   0|F      |  11| 90|\n|   1|M      |  10| 87|\n|   0|F      |  11| 99|\n|   1|F      |  14| 89|\n\n</div>\n:::\n:::\n\n\n## \n\nSquare brackets select a column of a data frame either by a number the column name:\n\n::: left\n\n::: {.cell}\n\n```{.r .cell-code}\nstudy[3]\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| age|\n|---:|\n|  12|\n|  13|\n|  11|\n|  10|\n|  11|\n|  14|\n\n</div>\n:::\n:::\n\n:::\n\n::: right\n\n::: {.cell}\n\n```{.r .cell-code}\nstudy[\"age\"]\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| age|\n|---:|\n|  12|\n|  13|\n|  11|\n|  10|\n|  11|\n|  14|\n\n</div>\n:::\n:::\n\n:::\n\n## \n\nThe subsetted object is a data frame with one column.  \nThis is different from extracting a variable with `$` or `[[` signs:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudy[[\"age\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12 13 11 10 11 14\n```\n:::\n\n```{.r .cell-code}\nstudy$age\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12 13 11 10 11 14\n```\n:::\n:::\n\n\nwhich returns a vector (!)\n\nWhile this works:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmedian(study[[\"age\"]])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11.5\n```\n:::\n:::\n\n\nthis throws an error:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmedian(study[\"age\"])\n```\n:::\n\n\n```\nError in median.default(study[\"age\"]) : need numeric data\n```\n\n##\n\nProviding a vector will select multiple columns:\n\n::: left\n\n::: {.cell}\n\n```{.r .cell-code}\nstudy[c(1,3)]\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| sen| age|\n|---:|---:|\n|   0|  12|\n|   1|  13|\n|   0|  11|\n|   1|  10|\n|   0|  11|\n|   1|  14|\n\n</div>\n:::\n:::\n\n:::\n\n::: right\n\n::: {.cell}\n\n```{.r .cell-code}\nstudy[c(\"sen\", \"age\")]\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| sen| age|\n|---:|---:|\n|   0|  12|\n|   1|  13|\n|   0|  11|\n|   1|  10|\n|   0|  11|\n|   1|  14|\n\n</div>\n:::\n:::\n\n:::\n\n## Extraction and subsetting\n\nThe extraction of a vector and the selection of elements can be combined:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage <- study[[\"age\"]]\nage[c(2,4)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 13 10\n```\n:::\n:::\n\n\nOr within one step:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudy$age[c(2,4)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 13 10\n```\n:::\n\n```{.r .cell-code}\nstudy[[\"age\"]][c(2,4)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 13 10\n```\n:::\n:::\n\n\n## Selecting rows and columns\n\nSpecific cases are selected within square brackets: `object_name[rows, columns]`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudy[5, ]  # filter a row\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|   | sen|gender | age| IQ|\n|:--|---:|:------|---:|--:|\n|5  |   0|F      |  11| 99|\n\n</div>\n:::\n\n```{.r .cell-code}\nstudy[c(2, 6), ] # filter two rows\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|   | sen|gender | age| IQ|\n|:--|---:|:------|---:|--:|\n|2  |   1|M      |  13| 85|\n|6  |   1|F      |  14| 89|\n\n</div>\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudy[c(2, 6), \"IQ\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 85 89\n```\n:::\n\n```{.r .cell-code}\nstudy[c(2, 6), c(\"sen\", \"IQ\")]\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|   | sen| IQ|\n|:--|---:|--:|\n|2  |   1| 85|\n|6  |   1| 89|\n\n</div>\n:::\n:::\n\n\n------------------------------------------------------------------------\n\nYou could also use numbers to address the columns:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudy[, 2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"M\" \"M\" \"F\" \"M\" \"F\" \"F\"\n```\n:::\n\n```{.r .cell-code}\nstudy[c(2, 6), c(1, 3)]\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|   | sen| age|\n|:--|---:|---:|\n|2  |   1|  13|\n|6  |   1|  14|\n\n</div>\n:::\n:::\n\n\n## Task {background-image=\"img/bg-task.png\"}\n\nPlease create a new data frame (`study2`) comprising the `gender` and `age` variables for the cases 1, 3, and 5 of the `study` data frame.\n\n\n[**:-)**]{style=\"color: red;\"}\n\n\n\n## Task - solution {background-image=\"img/bg-task.png\"}\n\nPlease create a new data frame (`study2`) comprising the `gender` and `age` variables for the cases 1, 3, and 5 of the `study` data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudy2 <- study[c(1, 3, 5), c(\"gender\", \"age\")]\nstudy2\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|   |gender | age|\n|:--|:------|---:|\n|1  |M      |  12|\n|3  |F      |  11|\n|5  |F      |  11|\n\n</div>\n:::\n:::\n\n\n\n## Sophisticated subsetting {background-image=\"img/bg-h1-3.jpg\"}\n\nSubsetting becomes most powerful when it is combined with conditional selections.\n\nFor example:\n\n- Select all students with special educational needs.\n- Select all male students between the age of 6 and 10 \n\nTo apply such selections, we have to know about *relational* and *logical* operators.\n\n\n## Relational operators\n\nRelational operators compare two values and return a logical value (`TRUE` or `FALSE`)\n\n|Operator|Relation|Example|\n|----|----------------|--------|\n|`==`|is identical|x == y|\n|`!=`|is not identical|x != y|\n|`>`|is greater|x > y|\n|`>=`|is greater or identical|x >= y|  \n|`<`|is less|x < y|\n|`<=`|is less or identical|x <=  y|  \n\n## Examples\n\n\n::: {.cell}\n\n```{.r .cell-code}\n7 > 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n7 <=  10\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n5 == 4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n5 != 6\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n## Relational vectors and characters\n\nOnly `==` and `!=` can be applied to non numerical objects:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"Hamster\" == \"Mouse\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n\"Hamster\" != \"Mouse\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n## Relational operators and vectors\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage <- c(12, 4, 3, 8, 4, 2, 1)\nage < 5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE\n```\n:::\n:::\n\n\nThis behavior is called *recycling* as is implemented in many (but not all!) R functions.\n\n***recycling:*** An operation is applied to each element of a vector and a vector is returned.\n\n\n::: {.cell}\n::: {.cell-output-display}\n| age|age < 5 |\n|---:|:-------|\n|  12|FALSE   |\n|   4|TRUE    |\n|   3|TRUE    |\n|   8|FALSE   |\n|   4|TRUE    |\n|   2|TRUE    |\n|   1|TRUE    |\n:::\n:::\n\n\n## Using logical vectors to select values\n\nWhen you put a logical vector within square brackets `[ ]` after an object, all elements of that object with a `TRUE` in the logical vector are selected:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage <- c(12, 4, 3, 8)\nx <- age > 5\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE FALSE  TRUE\n```\n:::\n\n```{.r .cell-code}\nage[x]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12  8\n```\n:::\n:::\n\n\n## Using logical vectors to select values\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage <- c(12, 4, 3, 8)\nx <- age > 5\nage[x]\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| age|x <- age > 5 |Select?    |Result |\n|---:|:------------|:----------|:------|\n|  12|TRUE         |**select** |12     |\n|   4|FALSE        |drop       |       |\n|   3|FALSE        |drop       |       |\n|   8|TRUE         |**select** |8      |\n\n</div>\n:::\n:::\n\n\n## Task {background-image=\"img/bg-task.png\"}\n\nCreate a new vector `friends <- c(4, 5, 6, 3, 7, 2, 3)`.  \nShow all values of that vector `>= 4`.\n\n\n\n[**:-)**]{style=\"color: red;\"}\n\n\n\n\n## Task - solution {background-image=\"img/bg-task.png\"}\n\nCreate a new vector `friends <- c(4, 5, 6, 3, 7, 2, 3)`.  \nShow all values of that vector `>= 4`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfriends <- c(4, 5, 6, 3, 7, 2, 3)\nfriends[friends >= 4]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4 5 6 7\n```\n:::\n:::\n\n\n\n## which() {.build}\n\nThe `which()` functions gives the **indices** of the elements that are `TRUE`.  \nIt takes a *logical vector* as an *argument*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(TRUE, FALSE, FALSE, TRUE)\nwhich(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 4\n```\n:::\n:::\n\n\n`which()` can handle missing values:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(TRUE, FALSE, NA, FALSE, TRUE, NA)\nwhich(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 5\n```\n:::\n:::\n\n\n---\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage <- c(12, 4, 3, 8)\nx <- age < 5\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE  TRUE  TRUE FALSE\n```\n:::\n\n```{.r .cell-code}\nwhich(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 3\n```\n:::\n:::\n\n\n---\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage <- c(12, 4, 3, 8)\nx <- age < 5\nx\nwhich(x)\nage[which(x)]\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| Index| age|x <- age < 5 |which(x) |age[which(x)] |\n|-----:|---:|:------------|:--------|:-------------|\n|     1|  12|FALSE        |         |              |\n|     2|   4|TRUE         |2        |4             |\n|     3|   3|TRUE         |3        |3             |\n|     4|   8|FALSE        |         |              |\n\n</div>\n:::\n:::\n\n\n\n## Why use which?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage = c(NA, 12, 4, 3, NA, 8, 7, 4, 3, 6, 4, 3)\nx <- age < 6\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]    NA FALSE  TRUE  TRUE    NA FALSE FALSE  TRUE  TRUE FALSE  TRUE  TRUE\n```\n:::\n\n```{.r .cell-code}\nage[x]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA  4  3 NA  4  3  4  3\n```\n:::\n\n```{.r .cell-code}\nmean(age[x])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\nmean(age[which(x)])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.5\n```\n:::\n:::\n\n\n## Task {background-image=\"img/bg-task.png\"}\n\nCreate a vector `x <- c(1, 4, 5, 3, 4, 5)` and identify:  \n1. Which elements are larger or equal than three?     \n2. Create a new vector from `x` containing all elements that are **not** four. Note: Use the `which()` function for this task.\n\n\n[**:-)**]{style=\"color: red;\"}\n\n\n\n## Task - solution {background-image=\"img/bg-task.png\"}\n\nCreate a vector `x <- c(1, 4, 5, 3, 4, 5)` and identify:  \n1. Which elements are larger or equal than three?     \n2. Create a new vector from `x` containing all elements that are **not** four. Note: Use the `which()` function for this task.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(1, 4, 5, 3, 4, 5)\nwhich(x >= 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 3 4 5 6\n```\n:::\n\n```{.r .cell-code}\ny <- x[which(x != 4)]\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 5 3 5\n```\n:::\n:::\n\n\n## Selecting cases with logical vectors {.build}\n\nLogical vectors can also be appplied to *data frames* for selecting cases.\n\nLet us take an example data frame:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudy <- data.frame(\n  sen    = c(0, 1, 0, 1, 0, 1),\n  gender = c(\"M\", \"M\", \"F\", \"M\", \"F\", \"F\"),\n  age    = c(12, 13, 11, 10, 11, 14),\n  IQ     = c(90, 85, 90, 87, 99, 89)\n)\n```\n:::\n\n\n---\n\nSelect with bracket subsetting or the `which()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudy_no_sen <- study[study[[\"sen\"]] == 0, ]\nstudy_no_sen\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|   | sen|gender | age| IQ|\n|:--|---:|:------|---:|--:|\n|1  |   0|M      |  12| 90|\n|3  |   0|F      |  11| 90|\n|5  |   0|F      |  11| 99|\n\n</div>\n:::\n\n```{.r .cell-code}\n# Or using the which() function\nfilter <- which(study[[\"sen\"]] == 0)\nstudy_no_sen <- study[filter, ]\n```\n:::\n\n\n## Task {background-image=\"img/bg-task.png\"}\n\nCalculate the `mean` of `IQ` for students with and without sen.\n\n\n[**:-)**]{style=\"color: red;\"}\n\n\n\n## Task - solution {background-image=\"img/bg-task.png\"}\n\nCalculate the `mean` of `IQ` for students with and without sen.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter <- which(study[[\"sen\"]] == 0)\nmean(study[[\"IQ\"]][filter])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 93\n```\n:::\n\n```{.r .cell-code}\nfilter <- which(study[[\"sen\"]] == 1)\nmean(study[[\"IQ\"]][filter])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 87\n```\n:::\n:::\n\n\n## Logical Operations {.smaller}\n\nLogical operations are applied to logical values. \n\n|Operator| Operation|Example|Results|\n|--------|----------|-------|-------|\n|`!`|Not|`! x`|`TRUE when x = FALSE and FALSE when x = TRUE`|\n|`&`|AND|`x & y`|`TRUE when x and y are TRUE else FALSE`|\n|`|`|OR|`x | y`|`TRUE when x or y is TRUE else FALSE`|\n\n::: em\nNote: To get the | sign:  \nOn a german Mac keyboard press: option + 7  \nOn a german Windows keyboard press: AltGr + <  \n:::\n\n## Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- TRUE\ny <- FALSE\n```\n:::\n\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n!x\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n!y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nx & y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nx | y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n## Logical Operator with vectors {.build}\n\nWhen applied to vectors, logical operations result in a new vector.  \nOperations are applied to each element one by one.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(TRUE, FALSE, TRUE,  FALSE)\ny <- c(TRUE, FALSE, FALSE, TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n!x\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE  TRUE FALSE  TRUE\n```\n:::\n\n```{.r .cell-code}\nx & y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE FALSE FALSE\n```\n:::\n\n```{.r .cell-code}\nx | y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE  TRUE  TRUE\n```\n:::\n:::\n\n\n## Task {background-image=\"img/bg-task.png\"}\n\nCreate two vectors:\n\n``` .r\nglasses <- c(TRUE, TRUE, FALSE, TRUE, FALSE)  \nhyperintelligent <- c(TRUE, FALSE, FALSE, TRUE, FALSE)\n```\n\nDetermine for each element whether `glasses` and `hyperintelligent` are TRUE at the same time.\n\n\n\n[**:-)**]{style=\"color: red;\"}\n\n\n\n\n\n## Task - solutions {background-image=\"img/bg-task.png\"}\n\nCreate two vectors:\n\n``` .r\nglasses <- c(TRUE, TRUE, FALSE, TRUE, FALSE)  \nhyperintelligent <- c(TRUE, FALSE, FALSE, TRUE, FALSE)\n```\nDetermine for each element whether `glasses` and `hyperintelligent` are TRUE at the same time.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglasses <- c(TRUE, TRUE, FALSE, TRUE, FALSE)\nhyperintelligent <- c(TRUE, FALSE, FALSE, TRUE, FALSE)\nglasses & hyperintelligent\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE FALSE  TRUE FALSE\n```\n:::\n:::\n\n\n---\n\n\n::: {.cell}\n::: {.cell-output-display}\n|glasses |hyperintelligent |glasses & hyperintelligent |\n|:-------|:----------------|:--------------------------|\n|TRUE    |TRUE             |TRUE                       |\n|TRUE    |FALSE            |FALSE                      |\n|FALSE   |FALSE            |FALSE                      |\n|TRUE    |TRUE             |TRUE                       |\n|FALSE   |FALSE            |FALSE                      |\n:::\n:::\n\n\n## `sum()` and `mean()` with logical vectors:\n\nWhen a logical vector is applied to a numeric function (e.g. `mean()` or `sum()`), `TRUE` is counted as `1` and `FALSE` as `0`:\n\n`sum()` then gives the number of elements that are TRUE.  \n`mean()` gives the proportion of elements that are TRUE.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# e.g.:\nsum(c(TRUE, FALSE, TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\nmean(c(TRUE, FALSE, TRUE, FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.5\n```\n:::\n:::\n\n\n## Task {background-image=\"img/bg-task.png\"}\n\nTake the data from the last example and calculate the sum and proportion of cases that wear glasses and are hyperintelligent.\n\n``` .r\nglasses <- c(TRUE, TRUE, FALSE, TRUE, FALSE)\nhyperintelligent <- c(TRUE, FALSE, FALSE, TRUE, FALSE)\n```\n\n\n[**:-)**]{style=\"color: red;\"}\n\n\n\n## Task - solutions {background-image=\"img/bg-task.png\"}\n\nTake the data from the last example and calculate the sum and proportion of cases that wear glasses and are hyperintelligent.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(glasses & hyperintelligent)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\nmean(glasses & hyperintelligent)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.4\n```\n:::\n:::\n\n\n## Combining logical and relational operators {.build}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage <- c(12, 4, 3, 8, 4, 2, 1, 7, 4)\ngender <- c(0, 1, 0, 1, 0, 0, 0, 0, 1)\nage > 4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE\n```\n:::\n\n```{.r .cell-code}\ngender == 0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE FALSE\n```\n:::\n\n```{.r .cell-code}\nage > 4 & gender == 0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE\n```\n:::\n:::\n\n\n## Task {background-image=\"img/bg-task.png\"}\n\nCreate a vector  \n`income <- c(5000, 4000, 3000, 2000, 1000)` and a vector  \n`happiness <- c(20, 35, 30, 10, 50)`.  \n\n1. Use *relational* and *logical* operations to determine for each element whether the `income` is larger than `2500` and at the same time `happiness` is above `25`.\n\n2. Calculate the proportion.\n\n\n[**:-)**]{style=\"color: red;\"}\n\n\n\n## Task - solution {background-image=\"img/bg-task.png\"}\n\n1. Use *relational* and *logical* operations to determine for each element whether the `income` is larger than `2500` and at the same time `happiness` is above `25`.\n\n2. Calculate the proportion.\n\n\n\n\n\n\n\n---\n\n\n::: {.cell}\n\n```{.r .cell-code}\nincome <- c(5000, 4000, 3000, 2000, 1000)\nhappiness <- c(20, 35, 30, 10, 50)\nincome > 2500 & happiness > 25\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n| income| happiness|income > 2500 |happiness > 25 |income > 2500 &<br>happiness > 25 |\n|------:|---------:|:-------------|:--------------|:---------------------------------|\n|   5000|        20|TRUE          |FALSE          |FALSE                             |\n|   4000|        35|TRUE          |TRUE           |TRUE                              |\n|   3000|        30|TRUE          |TRUE           |TRUE                              |\n|   2000|        10|FALSE         |FALSE          |FALSE                             |\n|   1000|        50|FALSE         |TRUE           |FALSE                             |\n:::\n:::\n\n\n---\n\n... and the proportion\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(income > 2500 & happiness > 25)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.4\n```\n:::\n:::\n\n\n## Subsetting data frames with logical and relational operators {.build}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudy\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| sen|gender | age| IQ|\n|---:|:------|---:|--:|\n|   0|M      |  12| 90|\n|   1|M      |  13| 85|\n|   0|F      |  11| 90|\n|   1|M      |  10| 87|\n|   0|F      |  11| 99|\n|   1|F      |  14| 89|\n\n</div>\n:::\n:::\n\n\n---\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter <- study[[\"sen\"]] == 1 & study[[\"gender\"]] == \"M\"\nstudy[filter, ]\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|   | sen|gender | age| IQ|\n|:--|---:|:------|---:|--:|\n|2  |   1|M      |  13| 85|\n|4  |   1|M      |  10| 87|\n\n</div>\n:::\n:::\n\n\n## Task {.smaller background-image=\"img/bg-task.png\"}\n\nUse the `ChickWeight` data frame for the following task.  \nThe data set is already included in R.\n\n1. Look into the data set with `?ChickWeight`.\n2. Get all variable names of the data frame with the `names()` function (`names(ChickWeight)`).\n3. Select cases from **ChickWeight** with `Diet == 1` and `Time < 16`.\n4. For these cases, calculate the correlation between `weight` and `Time`. Note: Use the `cor()` function (e.g., `cor(x, y)`)\n5. Repeat steps 3 and 4 for `Diet == 4`.\n6. What can you see?\n\n\n\n[**:-)**]{style=\"color: red;\"}\n\n\n\n\n---\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter <- ChickWeight[[\"Diet\"]] ==  1 & ChickWeight[[\"Time\"]] < 16\ndiet1 <- ChickWeight[filter,]\ncor(diet1[[\"weight\"]], diet1[[\"Time\"]])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.8109772\n```\n:::\n:::\n\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter <- ChickWeight[[\"Diet\"]] ==  4 & ChickWeight[[\"Time\"]] < 16\ndiet4 <- ChickWeight[filter,]\ncor(diet4[[\"weight\"]], diet4[[\"Time\"]])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.9720822\n```\n:::\n:::\n\n\nThe correlation is larger for Diet 4. This suggests that Diet 4 has a stronger impact an the chicken's weight.\n\n## The `subset()` function {.smaller}\n\nR comes with a function to make subsetting a bit more straight forward.\n\n\n`subset()` has the main arguments:\n\n- `x` : A data.frame  \n- `subset` : A logical vector for filtering rows  \n- `select` : expression, indicating columns to select from a data frame\n\n\nand returns a data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubset(study, gender == \"F\" & IQ > 89, c(sen, gender, IQ))\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|   | sen|gender | IQ|\n|:--|---:|:------|--:|\n|3  |   0|F      | 90|\n|5  |   0|F      | 99|\n\n</div>\n:::\n:::\n\n\nVariable names must be provided without quotes and without the name of the data.frame.\n\n## Task {background-image=\"img/bg-task.png\"}\n\nTake the `mtcars` dataset and filter cases (here: car models) with 6 cylinders (variable `cyl`) and automatic transmission (value `1` in variable `am`).  \nSelect the variables `mpg`, `am`, `gear`, `cyl`.  \nUse the `subset` function.\n\n\n\n\n[**:-)**]{style=\"color: red;\"}\n\n\n\n\n## Task - solutions {background-image=\"img/bg-task.png\"}\n\nTake the `mtcars` dataset and filter cases (here: car models) with 6 cylinders (variable `cyl`) and automatic transmission (value `1` in variable `am`).  \nSelect the variables `mpg`, `am`, `gear`, `cyl`.  \nUse the `subset` function.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubset(mtcars, cyl == 6 & am == 1, c(mpg, am, gear, cyl))\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|              |  mpg| am| gear| cyl|\n|:-------------|----:|--:|----:|---:|\n|Mazda RX4     | 21.0|  1|    4|   6|\n|Mazda RX4 Wag | 21.0|  1|    4|   6|\n|Ferrari Dino  | 19.7|  1|    5|   6|\n\n</div>\n:::\n:::\n\n\n\n## So many ways of subsetting ... an overview\n\nSubset a data frame (and get a new data frame)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars[mtcars[[\"cyl\"]] == 6 & mtcars[[\"am\"]] == 1, \n       c(\"mpg\", \"am\", \"gear\", \"cyl\")]\n\nmtcars[mtcars$cyl == 6 & mtcars$am == 1, c(\"mpg\", \"am\", \"gear\", \"cyl\")]\n\nsubset(mtcars, cyl == 6 & am == 1, c(mpg, am, gear, cyl))\n\nwith(mtcars, \n  mtcars[cyl == 6 & am == 1, c(\"mpg\", \"am\", \"gear\", \"cyl\")]\n)\n```\n:::\n\n\n## So many ways of subsetting ... an overview\n\nExtract a variable from a data frame (and get a numeric or character vector)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars[[\"mpg\"]][mtcars[[\"cyl\"]] == 6 & mtcars[[\"am\"]] == 1]\n\nmtcars$mpg[mtcars$cyl == 6 & mtcars$am == 1]\n\nsubset(mtcars, cyl == 6 & am == 1, mpg, drop = TRUE)\n\nwith(mtcars, mpg[cyl == 6 & am == 1])\n```\n:::\n\n\n## Odd behaviour:\n\nFor base R data frames this creates a vector:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars[mtcars[[\"cyl\"]] == 6 & mtcars[[\"am\"]] == 1, \"mpg\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 21.0 21.0 19.7\n```\n:::\n:::\n\n\nThis should have resulted in a data frame with one variable but is automatically reduced to a vector.  \nAdd `drop = FALSE` to get standard behavior.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars[mtcars[[\"cyl\"]] == 6 & mtcars[[\"am\"]] == 1, \"mpg\", drop = FALSE]\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|              |  mpg|\n|:-------------|----:|\n|Mazda RX4     | 21.0|\n|Mazda RX4 Wag | 21.0|\n|Ferrari Dino  | 19.7|\n\n</div>\n:::\n:::\n\n\nSome modern implementations of data frames (like `tibbles`) changed this behavior.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    function fireSlideChanged(previousSlide, currentSlide) {\n\n      // dispatch for htmlwidgets\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for reveal\n    if (window.Reveal) {\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\n        fireSlideChanged(event.previousSlide, event.currentSlide);\n      });\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}