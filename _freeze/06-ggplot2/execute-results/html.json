{
  "hash": "325ebc53201178a6311aa0a07bfac082",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"ggplot2\"\nformat: revealjs\n---\n\n\n\n## Goals {background-image=\"images/bg-h1-3.jpg\"}\n\n-   An introduction to the ***Grammar of Graphics***\n-   An introduction to ***ggplot***\n\n## ggplot2\n\n-   ggplot2 is an R package for visualizing data.\n-   It is part of the [tidyverse](https://ggplot2.tidyverse.org/)\n-   It is based on a concept called [The Grammar of Graphics](https://link.springer.com/content/pdf/10.1007%2F978-3-642-21551-3_13.pdf) by Leland Wilkinson\n-   It has been programmed and implemented as an R package by [Hadley Wickham](http://hadley.nz/).\n-   There is a [book available on ggplot2](https://link.springer.com/book/10.1007/978-3-319-24277-4)\n-   Which you find [at https://ggplot2-book.org/](https://ggplot2-book.org/) as an online book.\n\n## ggplot components\n\n![](images/ggplot_layers.png){width=\"800\"}\n\n## Basic concepts of ggplot2\n\nA ggplot graphic has at least three key components:\n\n::: left\n1.  ***data***\n2.  A set of ***aesthetic mappings*** between variables in the data and visual properties (x and y axis, colour, dotsize etc.)\n3.  At least one ***geometries layer*** which describes how to render each observation (lines, point, bars etc.). Layers are usually created with a **geom** function\n:::\n\n::: right\n![](images/ggplot_layer_1_3.png){width=\"800\"}\n:::\n\n## Task\n\n-   Copy and execute these lines:\n-   `displ` displacement by `hwy` highway miles per gallon\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_point()\n```\n:::\n\n\n\n[**:-)**]{style=\"color: red;\"}\n\n\n## \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![](06-ggplot2_files/figure-revealjs/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n\n\n## Task\n\n-   Copy and execute these lines:\n-   Axis: `displ` displacement and `hwy` highway miles per gallon\n-   Colour: `drv` f = front-wheel drive, r = rear wheel drive, 4 = 4wd\n-   Size: `cyl` number of cylinders\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy, color = drv, size = cyl)) + \n  geom_point()\n```\n:::\n\n\n\n[**:-)**]{style=\"color: red;\"}\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy, color = drv, size = cyl)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![](06-ggplot2_files/figure-revealjs/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n\n\n## The `ggplot()` function\n\nThe main function is `ggplot()`. It takes two arguments:\n\n1.  `data` : A *data frame*\n2.  `mapping` : **Aesthetic mappings** provided with the `aes()` function.\n\nAdditional layers are added with a `+` sign.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy, color = drv, size = cyl)) + \n  geom_point()\n```\n:::\n\n\n## Task\n\n-   Take the `mpg` data frame.\n-   Plot a graph with ...\n    -   `cty` and `hwy` displayed on the axis and\n    -   the colour is mapped on the variable `class` and\n    -   the shape (`shape = drv`) is mapped on the variable `drv`.\n-   Use the `geom_point()` layer.\n\n\n[**:-)**]{style=\"color: red;\"}\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(cty, hwy, colour = class, shape = drv))  + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![](06-ggplot2_files/figure-revealjs/ggplot-ex-1-1.png){width=960}\n:::\n:::\n\n\n## Fixed aestetics\n\n-   *Aestetics* can also be provided in the `geom` function.\n-   Here they are not mapped to variables but fixed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(diamonds, aes(carat, price)) + \n  geom_point(colour =\"red\", shape = \"+\", size = 1)\n```\n\n::: {.cell-output-display}\n![](06-ggplot2_files/figure-revealjs/unnamed-chunk-6-1.png){width=480}\n:::\n:::\n\n\n## Some geoms\n\n-   `geom_point()` : Dots for each data point.\n-   `geom_line()` : Lines connecting each x-axis data point\n-   `geom_bar()` : Bars\n-   `geom_text()` : Text at x and y positions\n-   `geom_smooth()` : Smoothed conditional means\n\n## \n\n\n::: {.cell layout-ncol=\"4\"}\n::: {.cell-output-display}\n![](06-ggplot2_files/figure-revealjs/unnamed-chunk-7-1.png){width=192}\n:::\n\n::: {.cell-output-display}\n![](06-ggplot2_files/figure-revealjs/unnamed-chunk-7-2.png){width=192}\n:::\n\n::: {.cell-output-display}\n![](06-ggplot2_files/figure-revealjs/unnamed-chunk-7-3.png){width=192}\n:::\n\n::: {.cell-output-display}\n![](06-ggplot2_files/figure-revealjs/unnamed-chunk-7-4.png){width=192}\n:::\n:::\n\n\n## Task\n\n-   Take the `economics` data frame\n-   Create a lineplot for `date` and `unemployment`. (`geom_line()`)\n-   Add a second layer for red dots of size = 1 (`geom_point()`)\n\n\n[**:-)**]{style=\"color: red;\"}\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(economics, aes(date, unemploy)) + \n  geom_line() + \n  geom_point(color = \"red\", size = 1)\n```\n\n::: {.cell-output-display}\n![](06-ggplot2_files/figure-revealjs/unnamed-chunk-8-1.png){width=960}\n:::\n:::\n\n\n## `geom_bar()`\n\n-   `geom_bar()` draws bars\n-   By default, it counts the numbers of entities of categories provided as the `x` variable\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Number of cars in each class:\nggplot(mpg, aes(class)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](06-ggplot2_files/figure-revealjs/unnamed-chunk-9-1.png){width=960}\n:::\n:::\n\n\n## Task\n\n-   Take the `mpg` data frame.\n-   Create a barplot with the counts of categories for the `drv` variable.\n-   Colour the bars `red` with the `fill` argument.\n-   Set the argument `width = 0.8` to resize the bar width.\n\n\n[**:-)**]{style=\"color: red;\"}\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(drv)) +\n  geom_bar(fill = \"red\", width = 0.8)\n```\n\n::: {.cell-output-display}\n![](06-ggplot2_files/figure-revealjs/unnamed-chunk-10-1.png){width=960}\n:::\n:::\n\n\n## `geom_col()`\n\n-   With the `geom_col()` function, bar heights and bar categories are taken from the x and y variables:\n\n## Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(\n  type = c(\"A\", \"B\", \"C\"), \n  mean = c(2.5, 4.4, 6.3)\n)\nggplot(df, aes(x = type, y = mean)) +\n  geom_col()\n```\n\n::: {.cell-output-display}\n![](06-ggplot2_files/figure-revealjs/unnamed-chunk-11-1.png){width=480}\n:::\n:::\n\n\n## Task\n\n-   Take the `starwars` database.\n-   Calculate the bmi.\n\n``` .r\nmutate(bmi = mass / (height / 100)^2)\n```\n-   Filter all `bmi < 100`.\n-   Summarise the median of the bmi grouped by species.\n-   Create a fitting barplot.\n-   Add the following layer. Otherwise the x-labels will overlap:\n\n```.r\ntheme(axis.text.x = element_text(angle = 40, hjust=1))\n```\n\nHint: \n\n```.r\nsummarise(mean_bmi = median(bmi, na.rm = TRUE)\n```\n\n\n[**:-)**]{style=\"color: red;\"}\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% \n  mutate(bmi = mass / (height / 100)^2) %>% \n  filter(bmi < 100) %>%\n  group_by(species) %>% \n  summarise(\n    mean_bmi = median(bmi, na.rm = TRUE)\n  ) %>%\n  ggplot(aes(species, mean_bmi)) +\n    geom_col() +\n    theme(axis.text.x = element_text(angle = 40, hjust=1))\n```\n\n::: {.cell-output-display}\n![](06-ggplot2_files/figure-revealjs/unnamed-chunk-12-1.png){width=960}\n:::\n:::\n\n\n## `geom_smooth()` {.smaller}\n\ngeom_smooth() is used to add smoothed conditional means in scatterplots.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg,aes(displ, hwy)) + \n  geom_point() +\n  geom_smooth()\n```\n\n::: {.cell-output-display}\n![](06-ggplot2_files/figure-revealjs/unnamed-chunk-13-1.png){width=960}\n:::\n:::\n\n\n## Task\n\n-   Take the `economics` data frame.\n-   Create a scatterplot with number of unemployed `unemploy` by population `pop`.\n-   Add a `geom_smooth` layer.\n\n\n[**:-)**]{style=\"color: red;\"}\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\neconomics %>%\n  ggplot(aes(pop, unemploy)) + \n    geom_point() + \n    geom_smooth()\n```\n\n::: {.cell-output-display}\n![](06-ggplot2_files/figure-revealjs/unnamed-chunk-14-1.png){width=960}\n:::\n:::\n\n\n## Task\n\n-   Install and activate the library `dslabs`.\n-   Take the dataframe `gapminder`.\n-   Group the data by `year` and `continent`.\n-   Use the `summarize()` function to calculate the mean of `infant_mortality`.\n-   Create a line and dot plot with `year` on x-axis, mean of `infant_mortality` on y-axis, and `continent` as line/dot colours.\n-   Add a `smooth` layer.\n\nHint: `group_by(year, continent)`\n\n\n[**:-)**]{style=\"color: red;\"}\n\n\n##  {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dslabs)\ngapminder %>% group_by(year, continent) %>%\n  summarize(m_infant_mortality = mean(infant_mortality, na.rm = TRUE)) %>%\n  ggplot(aes(x = year, y = m_infant_mortality, color = continent)) +\n    geom_line() + \n    geom_point() + \n    geom_smooth()\n```\n\n::: {.cell-output-display}\n![](06-ggplot2_files/figure-revealjs/unnamed-chunk-15-1.png){width=960}\n:::\n:::\n\n\n## Distributions of multiple datapoints in categories\n\nWhen you have multiple values ordered in a categorical variable simple plots become messy:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg,aes(drv, hwy)) + # Note: hwy is highway miles per gallon\n  geom_point()  # drv is the type of drive train, where f = front-wheel drive, r = rear wheel drive, 4 = 4wd\n```\n\n::: {.cell-output-display}\n![](06-ggplot2_files/figure-revealjs/unnamed-chunk-16-1.png){width=960}\n:::\n:::\n\n\n## Distributions of multiple datapoints in categories (2)\n\nSolutions\n\n-   `geom_jitter()` : Adds a litle random jitter to each datapoint\n-   `geom_boxplot()` : Draws a boxplot\n-   `geom_violin()` : Draws a violine plot\n\n## Task\n\n-   Take the `mgp` dataset\n-   Create the following plots for the variables x = drv and y = hwy\n    -   geom_jitter()\n    -   geom_boxplot()\n    -   geom_violin()\n\n\n[**:-)**]{style=\"color: red;\"}\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg,aes(drv, hwy)) +geom_jitter(width = 0.2)\nggplot(mpg,aes(drv, hwy)) +geom_boxplot()\nggplot(mpg,aes(drv, hwy)) +geom_violin()\n```\n:::\n\n\n\n::: {.cell layout-ncol=\"3\"}\n::: {.cell-output-display}\n![](06-ggplot2_files/figure-revealjs/three-geom-point-alternatives-1.png){width=288}\n:::\n\n::: {.cell-output-display}\n![](06-ggplot2_files/figure-revealjs/three-geom-point-alternatives-2.png){width=288}\n:::\n\n::: {.cell-output-display}\n![](06-ggplot2_files/figure-revealjs/three-geom-point-alternatives-3.png){width=288}\n:::\n:::\n\n\n## Further layers\n\n-   Add a title: ggtitle() ( e.g. ggtitle(\"My first plot\") )\n-   Change axis labels: labs(x = NULL, y = NULL) (e.g. labs(x = \"Categories\", y = \"Mean\"))\n-   Change axis scales: ylim(min = 0, max = 10) ; xlim(min = 0, max = 10)\n\n## Task\n\n## Facets {.smaller}\n\nFacets are another basic aesthetics. A plot is organizes multiple times by a categorical variable:\n\n::: left37\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(cty, hwy)) + \n  geom_point() +\n  facet_wrap(vars(class)) \n\n# or facet_wrap(~class)\n```\n:::\n\n:::\n\n::: right37\n\n::: {.cell}\n::: {.cell-output-display}\n![](06-ggplot2_files/figure-revealjs/unnamed-chunk-19-1.png){width=960}\n:::\n:::\n\n:::\n\n## Task\n\n-   Take the economics dataset\\\n-   Create a new Variable `year` by extracting the year from the `date` variable.\n-   Turn the saving rate variable `psavert` in to a categorical variable `saving_rate` with three levels\n-   Plot year by unemployment rate with facets for `saving_rate`.\n\nHint1: `year = format(date, format = \"%Y\")`\\\nHint2: `saving_rate = cut(psavert, breaks = 3, labels = c(\"Low\",\"Medium\",\"High\"))`\\\nHint3: unemployment rate: `unemploy / pop * 100`\n\n\n[**:-)**]{style=\"color: red;\"}\n\n\n##  {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\neconomics %>%\n  mutate(\n    year = format(date, format = \"%Y\"),\n    saving_rate = cut(psavert, breaks = 3, labels = c(\"Low\",\"Medium\",\"High\"))\n  ) %>%\n  ggplot(aes(year, unemploy/pop*100)) + \n    geom_point(size = 0.5) +\n    facet_wrap(~saving_rate) +\n    theme(axis.text.x = element_text(angle = 90, hjust=1, size = 5))\n```\n\n::: {.cell-output-display}\n![](06-ggplot2_files/figure-revealjs/unnamed-chunk-20-1.png){width=960}\n:::\n:::\n\n\n##  A complex example {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Code for this example\"}\nstats <- mpg %>%\n  group_by(class) %>%\n  summarise(n=n(), hwy = mean(hwy))\n\nggplot(mpg, aes(class, hwy)) +\n  geom_jitter(width = 0.2) +\n  geom_point(data = stats, mapping = aes(class, hwy), colour = \"red\", size = 6) +\n  geom_text(data = stats, aes(class, 10, label = paste0(\"n=\", n))) + \n  ylim(10, 45)\n```\n\n::: {.cell-output-display}\n![](06-ggplot2_files/figure-revealjs/complex-example-1-1.png){width=960}\n:::\n:::\n\n",
    "supporting": [
      "06-ggplot2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}