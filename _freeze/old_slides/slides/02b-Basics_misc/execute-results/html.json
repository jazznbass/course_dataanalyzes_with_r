{
  "hash": "a2747af12ce8f156bb6b98406f7c32a4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R Basic Concepts\"\nauthor: \"JÃ¼rgen Wilbert\"\ncompany: \"University of Potsdam\"\ndate: \"Version: 15 May 2025<br><br>- arrow keys: move through slides <br>- f: toggle full-screen\"\noutput:\n  ioslides_presentation: \n    css: styles.css\n    logo: img/ZEIF.png\n    widescreen: yes\n    df_print: kable\n  html_document: default\n  pdf_document: default\n  beamer_presentation: default\n  powerpoint_presentation:\n    reference_doc: template.pptx\n  slidy_presentation: default\n---\n\n\n\n\n\n# Extending R\n\n## libraries, packages, and repositories\n\n>- A \"fresh\" **R** installation already contains hundreds of *functions*.  \n>- Functions are organized in **libraries**.\n>- Libraries address a certain topic or area (e.g., graphics, a specific statstical method)\n>- A **package** is a 'container' for distributing and sharing *libraries*.\n>- You can add additional packages to extend you R installation.\n>- Additional packages are provided in **repositories** or in seperate files. \n>- Repositories are online data storages.\n>- The most important repository for *R* is CRAN <img src=\"img/R_logo.png\" width=\"30\" /> (The Comprehensive R Archive Network)\n\n## Installing and activating new packages {.build}\n\n>- You find a list of all CRAN packages on  \nhttps://cran.r-project.org/ <img src=\"img/right_arrow.jpg\" width=\"30\" /> Packages\n>- You get an overview of all functions within a package with the `help()` or short `?` function.\n>- You can directly install a package from CRAN with the `install.packages()` function.\n\nAfter successful installation, add on packages have to be activated and loaded into memory in each *R* sesssion with the `library()` function.  \nNote: You only install once, but you use `library()` each time you restart **R** or **R Studio**.\n\n## Task\n\nInstall the packages `psych` and `tidyverse`.  \nActivate both packages with  \n`library(tidyverse)`  \n`library(psych)`  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(c(\"psych\", \"tidyverse\"))\n```\n:::\n\n\n\n# R Studio projects\n\n## R-Studio projects {.build}\n\nAs soon as you have more tham one source file and/or external data, it makes sense to start a `project` instead of just using single `source` files.\n\n- A project is a feature of R Studio, not of R. \n- A project always hosted in a folder on your harddrive.\n- All scripts, data, and other files are stored in that folder.\n- When later opening a project, the *working directory* is directly set to the folder location.\n\n<div class=\"blue2\">***Working directory***:</div> The place on your harddrive R will save and load data from by default (i.e. when no other place is explicitly set). Use the `getwd()` and `setwd()` functions to get and set the working directory.\n\n## Starting an R-Studio project {.build}\n\nYou can start a `project` from R studio through:\n\n1. File <img src=\"img/right_arrow.jpg\" width=\"30\" /> New Project ...\n2. Now choose whether you already have a folder you like to start a project in or you create a new empty folder for an R project.\n3. Choose New R Project as the project type.\n4. Choose a directory name and start the project.\n\n## Task {.build}\n\n- Create a new R project with a name of your choice (e.g. 'R_course'). \n- Copy all your R scripts related to this R course into that new project folder.\n- Close and reopen R Studio\n- Open the project through:\n  - File <img src=\"img/right_arrow.jpg\" width=\"30\" /> Recent projects\n  - Or the project menue in the upper right corner of R Studio\n\n# External data\n\n## Importing a data set from Excel\n\n- The `read_excel()` function from the `readxl` package (included in `tidyverse`) is used to import files created by Microsoft Excel.\n- Alternatively: R Studio provided an easy way to import data:  \nFile <img src=\"img/right_arrow.jpg\" width=\"30\" /> Import Dataset <img src=\"img/right_arrow.jpg\" width=\"30\" /> From Excel\n- But if you want to have a full script that runs by itself, I recommend to use the R functions.\n- Store your data within your R project folder.\n- If you do not install it there, you need to know the folder location to load it into R.\n\n## Example\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\ndat <- read_xlsx(\"cars.xlsx\")\nnames(dat) # this function shows the variable names of a data frame \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\"   \"qsec\" \"vs\"   \"am\"   \"gear\"\n[11] \"carb\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|  mpg| cyl| disp|  hp| drat|    wt|  qsec| vs| am| gear| carb|\n|----:|---:|----:|---:|----:|-----:|-----:|--:|--:|----:|----:|\n| 21.0|   6|  160| 110| 3.90| 2.620| 16.46|  0|  1|    4|    4|\n| 21.0|   6|  160| 110| 3.90| 2.875| 17.02|  0|  1|    4|    4|\n| 22.8|   4|  108|  93| 3.85| 2.320| 18.61|  1|  1|    4|    1|\n\n</div>\n:::\n:::\n\n\n\n## Task\n\n- Download the Excel file \"cars.xlsx\" from the moodle course.  \n- Save it in your project directory.  \n- Import the data set and assign it to an object `dat`.  \n- Apply the `View()` function to see the dataset.\n\nNote: `View()` opens a new tab in RStudio with the content of a data frame (e.g. `View(dat)`).\n\n## Task {.build}\n\n- Calculate the *mean* of `mpg` (miles per gallon) for cars with 4, 6, and 8 cylinders (variable `cly`).\n\n\n\n<div class=\"red2\">**:-)**</div>\n\n\n\n## Task - solution\n\n- Calculate the *mean* of `mpg` (miles per gallon) for cars with 4, 6, and 8 cylinders (variable `cly`).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(dat$mpg[dat$cyl == 4])\nmean(dat$mpg[dat$cyl == 6])\nmean(dat$mpg[dat$cyl == 8])\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 26.66364\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 19.74286\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 15.1\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}