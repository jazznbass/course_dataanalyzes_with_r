{
  "hash": "00b332f291fb7b8519ec5cb6b4af9a47",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Control functions\"\ncompany: \"University of Potsdam\"\nauthor: \"Jürgen Wilbert\"\ndate: \"Version: 15 May 2025\"\noutput:\n  ioslides_presentation: \n    css: styles.css\n    logo: img/ZEIF.png\n    widescreen: yes\n  html_document: default\n  pdf_document: default\n  beamer_presentation: default\n  powerpoint_presentation:\n    reference_doc: template.pptx\n  slidy_presentation: default\n---\n\n\n\n\n\n## if control structures\n\nif-else control structures are very helpful for solving complex conditional operations:\n\n`if (condition) expression`\n\nexample:\n\n`if (age >= 18) adult <- TRUE`\n\nThe expression can take multiple lines which are enclosed with braces:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (age >= 18 && gender == \"male\") { \n  adult <- TRUE\n  n_males <- n_males + 1\n}\n```\n:::\n\n\n\n## if-else control structures\n\nSometimes, the `if` structure is extended with `else`:\n\n`if (condition) expression1 else expression2`\n\nexample:\n\n`if (age >= 18) out <- \"full-aged\" else out <- \"underage\"`\n\n## More complex example\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (age >= 18 && gender == \"male\") {  \n  adult <- TRUE  \n  n_males <- n_males + 1  \n} else if (age >= 18 && gender == \"female\") { \n  adult <- TRUE  \n  n_females <- n_females + 1  \n} else if (age < 18) {    \n  adult <- FALSE  \n}\n```\n:::\n\n\n\n## \n\nThe `if` structure is not vectorized.  \nThat is, the condition must return a single logical TRUE or FALSE value.\nThis code will throw an error or warning message:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage <- c(18, 15)\nif (age >= 18) cat(\"Adult!\") else cat(\"Underage!\")\n```\n:::\n\n\n\n## ifelse\n\n`ifelse` is a vectorized version of `if()` `else` which returns a vector:\n\n`ifelse(condition, expression_true, expression_false)`\n\nExample:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage <- c(15, 18, 14, 12)\nifelse(age >= 18, \"adult\", \"underage\")\n[1] \"underage\" \"adult\"    \"underage\" \"underage\"\n```\n:::\n\n\n\n## Task: Read the code\n\nWhat is the object `results` after executing the code?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage <- c(15, 19, 21, 18, 17, 23)\ncut_full_aged <- 18\nlanguage <- \"german\"\nif (language == \"english\") {\n  label_adult <- \"adult\"\n  label_underage <- \"underage\"\n} else if (language == \"german\") {\n  label_adult <- \"Volljährig\"\n  label_underage <- \"Minderjährig\"\n} else {\n  stop(\"Unknown language!\")\n}\n\nresults <- ifelse(age < cut_full_aged, label_underage, label_adult)\n\n```\n:::\n\n\n\n##\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage <- c(15, 19, 21, 18, 17, 23)\ncut_full_aged <- 18\nlanguage <- \"german\"\nif (language == \"english\") {\n  label_adult <- \"adult\"\n  label_underage <- \"underage\"\n} else if (language == \"german\") {\n  label_adult <- \"Volljährig\"\n  label_underage <- \"Minderjährig\"\n} else {\n  stop(\"Unknown language!\")\n}\n\nresults <- ifelse(age < cut_full_aged, label_underage, label_adult)\n\nresults\n[1] \"Minderjährig\" \"Volljährig\"   \"Volljährig\"   \"Volljährig\"   \"Minderjährig\"\n[6] \"Volljährig\"  \n```\n:::\n\n\n\n## Task: Read the code\n\nWhat is contained in `res` after executing the code?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nby <- 1900 + 1:5 * 20\nres <- ifelse(by > 1996, \"Generation Z\", \n                  ifelse(by > 1980, \"Millenial\", \n                         ifelse(by > 1964, \"Generation X\", \n                                ifelse(by >1945, \"Babyboomer\", \n                                       ifelse(by > 1927, \"Silent generation\", \"Unknown\")))))\n                       \n\n```\n:::\n\n\n\n##\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nby <- 1900 + 1:5 * 20\nres <- ifelse(by > 1996, \"Generation Z\", \n                  ifelse(by > 1980, \"Millenial\", \n                         ifelse(by > 1964, \"Generation X\", \n                                ifelse(by >1945, \"Babyboomer\", \n                                       ifelse(by > 1927, \"Silent generation\", \"Unknown\")))))\n                       \nres\n[1] \"Unknown\"           \"Silent generation\" \"Babyboomer\"       \n[4] \"Generation X\"      \"Generation Z\"     \n```\n:::\n\n\n\n## For loops\n\nWith a `for` loop you can iterate the values of a vector:\n\n**for** (*variable* **in** *vector*) *expression*\n\nexample:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in 1:10) print(i)\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n[1] 8\n[1] 9\n[1] 10\n```\n:::\n\n\n\n## \n\nAn expression can have multiple lines enclosed in braces:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadult <- 0\nminor <- 0\nfor(i in c(20, 12, 15, 16, 18)) {\n  if (i >= 18) adult = adult + 1\n  if (i < 18) minor = minor + 1\n}\ncat(\"Adults:\", adult)\nAdults: 2\ncat(\"Minors:\", minor)\nMinors: 3\n```\n:::\n\n\n\n## \n\nOftentimes `for` loops are used to iterate multiple vectors.\n\nCan you read this code and predict the object `comparison` ? \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage1 <- c(20, 12, 15, 16, 18)\nage2 <- c(17, 13, 17, 16, 20)\ncomparison <- c()\nfor(i in 1:length(age1)) {\n  if (age1[i] < age2[i]) tmp <- \"younger\"\n  if (age1[i] > age2[i]) tmp <- \"older\"\n  if (age1[i] == age2[i]) tmp <- \"equal\"\n  comparison <- c(comparison, tmp)\n}\n\ncomparison\n```\n:::\n\n\n\n## \n\nYou can use `for` loops to iterate through a dataframe:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\nmtcars$impact <- \"average\"\n\nfor(i in 1:nrow(mtcars)) {\n  if (mtcars$mpg[i] < 18 && mtcars$cyl[i] == 8 && mtcars$wt[i] > 4) {\n    mtcars$impact[i] <- \"Big waster!\"\n  }\n  if (mtcars$mpg[i] > 22 && mtcars$cyl[i] == 4 && mtcars$wt[i] < 2.59) {\n    mtcars$impact[i] <- \"Light eco!\"\n  }\n}\n\nmtcars[, c(\"mpg\", \"cyl\", \"wt\", \"impact\")]\n```\n:::\n\n\n\n## \n\n\n\n::: {.cell}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|                  |  mpg| cyl|    wt|impact     |\n|:-----------------|----:|---:|-----:|:----------|\n|Mazda RX4         | 21.0|   6| 2.620|average    |\n|Mazda RX4 Wag     | 21.0|   6| 2.875|average    |\n|Datsun 710        | 22.8|   4| 2.320|Light eco! |\n|Hornet 4 Drive    | 21.4|   6| 3.215|average    |\n|Hornet Sportabout | 18.7|   8| 3.440|average    |\n|Valiant           | 18.1|   6| 3.460|average    |\n|Duster 360        | 14.3|   8| 3.570|average    |\n|Merc 240D         | 24.4|   4| 3.190|average    |\n|Merc 230          | 22.8|   4| 3.150|average    |\n|Merc 280          | 19.2|   6| 3.440|average    |\n\n</div>\n:::\n:::\n\n\n\n\n## Functions\n\nRepeated operations can be put into functions.\n\n*functionname* <- **function**(*argument*, *argument*, *argument*, ...) {*expression*}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npower2 <- function(x) {\n  out <- x * x\n  out\n}\n\npower2(4)\n[1] 16\npower2(c(2, 3, 4,5))\n[1]  4  9 16 25\n```\n:::\n\n\n\n\n## Function example\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nw20_die <- function(dice) {\n  if (dice < 1 || dice > 20) return(\"This is not a decent W20 die!\")\n  if (dice == 20) return(\"Critical hit!!\")\n  if (dice == 1) return(\"Epic fail\")\n  dice\n}\n```\n:::\n\n\n\n`return()` stops the function and returns an object. If no return is defined, the function will return the last object that is printed.\n\n##\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nw20_die <- function(dice) {\n  if (dice < 1 || dice > 20) return(\"This is not a decent W20 die!\")\n  if (dice == 20) return(\"Critical hit!!\")\n  if (dice == 1) return(\"Epic fail\")\n  dice\n}\nw20_die(20)\n[1] \"Critical hit!!\"\nw20_die(3)\n[1] 3\nw20_die(1)\n[1] \"Epic fail\"\nw20_die(0)\n[1] \"This is not a decent W20 die!\"\n```\n:::\n\n\n\n## Task Read the code\n\nWhat happens here?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npercentage <- function(x, na.rm = TRUE) {\n  if (!is.logical(x)) stop(\"Please provide a logical vector.\")\n  if (na.rm) x <- x[!is.na(x)]\n  sum(x) / length(x) * 100\n}\n\nvar <- c(12, 16, 19, 20, 11)\n\npercentage(var >= 18)\n[1] 40\n```\n:::\n\n\n\n## Task {.smaller}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nw20_die <- function(dice) {\n  if (dice < 1 || dice > 20) return(\"This is not a decent W20 die!\")\n  if (dice == 20) return(\"Critical hit!!\")\n  if (dice == 1) return(\"Epic fail\")\n  dice\n}\n```\n:::\n\n\n\n- Vectorize the `w20_die` function so it will return a vector with results when you provide a vector with numbers as an argument:\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresults <- c(21, 2, 16, 20, 1, 0)\nw20_die(results)\n[1] \"This is not a decent W20 die!\" \"2\"                            \n[3] \"16\"                            \"Critical hit!!\"               \n[5] \"Epic fail\"                     \"This is not a decent W20 die!\"\n```\n:::\n\n\n\n\n## Solution 1: With a ***for*** loop:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nw20_die <- function(dice) {\n  out <- dice\n  for(i in 1:length(dice)) {\n    if (dice[i] < 1 || dice[i] > 20) out[i] <- \"This is not a decent W20 die!\"\n    if (dice[i] == 20) out[i] <- \"Critical hit!!\"\n    if (dice[i] == 1) out[i] <- \"Epic fail\"\n  }\n  out\n}\nresults <- c(21, 2, 16, 20, 1, 0)\nw20_die(results)\n[1] \"This is not a decent W20 die!\" \"2\"                            \n[3] \"16\"                            \"Critical hit!!\"               \n[5] \"Epic fail\"                     \"This is not a decent W20 die!\"\n```\n:::\n\n\n\n## Solution 2: With subsetting:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nw20_die <- function(dice) {\n  out <- dice\n  out[dice < 1 | dice > 20] <- \"This is not a decent W20 die!\"\n  out[dice == 20] <- \"Critical hit!!\"\n  out[dice == 1] <- \"Epic fail\"\n  out\n}\nresults <- c(21, 2, 16, 20, 1, 0)\nw20_die(results)\n[1] \"This is not a decent W20 die!\" \"2\"                            \n[3] \"16\"                            \"Critical hit!!\"               \n[5] \"Epic fail\"                     \"This is not a decent W20 die!\"\n```\n:::\n\n\n\n## Solution 3: With ***ifelse***:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nw20_die <- function(dice) {\n  ifelse(dice < 1 | dice > 20, \"This is not a decent W20 die!\",\n         ifelse(dice == 20, \"Critical hit!!\",\n                ifelse(dice == 1, \"Epic fail\", dice)))\n}\nresults <- c(21, 2, 16, 20, 1, 0)\nw20_die(results)\n[1] \"This is not a decent W20 die!\" \"2\"                            \n[3] \"16\"                            \"Critical hit!!\"               \n[5] \"Epic fail\"                     \"This is not a decent W20 die!\"\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}