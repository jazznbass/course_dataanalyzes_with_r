{
  "hash": "66ca71dea3886a9671585721bf850e67",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R Basic Concepts - part 2\"\nformat: revealjs\n---\n\n# Extending R {background-image=\"images/bg-h1-3.jpg\"}\n\n\n\n## libraries, packages, and repositories {.smaller}\n\n::: incremental\n-   A \"fresh\" **R** installation already contains hundreds of *functions*.\\\n-   Functions are organized in **libraries**.\n-   Libraries address a certain topic or area (e.g., graphics, a specific statstical method)\n-   A **package** is a 'container' for distributing and sharing *libraries*.\n-   You can add additional packages to extend you R installation.\n-   Additional packages are provided in **repositories** or in seperate files.\n-   Repositories are online data storages.\n-   The most important repository for *R* is CRAN <img src=\"images/R_logo.png\" width=\"30\"/> (The Comprehensive R Archive Network)\n:::\n\n## Installing and activating new packages {.smaller}\n\n::: incremental\n-   You find a list of all CRAN packages on <https://cran.r-project.org/> ![](images/right_arrow.jpg){width=\"30\"} Packages\n-   You get an overview of all functions within a package with the `help()` or short `?` function.\n-   You can directly install a package from CRAN with the `install.packages()` function.\n:::\n\n. . .\n\nAfter successful installation, add on packages have to be activated and loaded into memory in each *R* sesssion with the `library()` function.\\\nNote: You only install once, but you use `library()` each time you restart **R** or **R Studio**.\n\n## Task\n\nInstall the packages `psych` and `tidyverse`.\\\nThen activate both packages:\n\n``` r\nlibrary(tidyverse)  \nlibrary(psych)\ninstall.packages(c(\"psych\", \"tidyverse\"))\n```\n\n# R Studio projects {background-image=\"images/bg-h1-3.jpg\"}\n\n## R-Studio projects\n\nAs soon as you have more than one source file and/or external data, it makes sense to start a `project` instead of just using single `source` files.\n\n-   A project is a feature of R Studio, not of R.\n-   A project always hosted in a folder on your harddrive.\n-   All scripts, data, and other files are stored in that folder.\n-   When later opening a project, the *working directory* is directly set to the folder location.\n\n[***Working directory***:]{.em} The place on your harddrive R will save and load data from by default (i.e. when no other place is explicitly set). Use the `getwd()` and `setwd()` functions to get and set the working directory.\n\n## Starting an R-Studio project\n\nYou can start a `project` from R studio through:\n\n1.  File ![](images/right_arrow.jpg){width=\"30\"} New Project ...\n2.  Now choose whether you already have a folder you like to start a project in or you create a new empty folder for an R project.\n3.  Choose New R Project as the project type.\n4.  Choose a directory name and start the project.\n\n## Task\n\n-   Create a new R project with a name of your choice (e.g. 'R_course').\n-   Copy all your R scripts related to this R course into that new project folder.\n-   Close and reopen R Studio\n-   Open the project through:\n    -   File ![](images/right_arrow.jpg){width=\"30\"} Recent projects\n    -   Or the project menue in the upper right corner of R Studio\n\n# External data {background-image=\"images/bg-h1-3.jpg\"}\n\n## Importing a data set from Excel\n\n-   The `read_excel()` function from the `readxl` package (included in `tidyverse`) is used to import files created by Microsoft Excel.\n-   Alternatively: R Studio provided an easy way to import data:\\\n    File ![](images/right_arrow.jpg){width=\"30\"} Import Dataset ![](images/right_arrow.jpg){width=\"30\"} From Excel\n-   But if you want to have a full script that runs by itself, I recommend to use the R functions.\n-   Store your data within your R project folder.\n-   If you do not install it there, you need to know the folder location to load it into R.\n\n## Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\ndat <- read_xlsx(\"cars.xlsx\")\nnames(dat) # this function shows the variable names of a data frame \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\"   \"qsec\" \"vs\"   \"am\"   \"gear\"\n[11] \"carb\"\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|  mpg| cyl|  disp|  hp| drat|    wt|  qsec| vs| am| gear| carb|\n|----:|---:|-----:|---:|----:|-----:|-----:|--:|--:|----:|----:|\n| 21.0|   6| 160.0| 110| 3.90| 2.620| 16.46|  0|  1|    4|    4|\n| 21.0|   6| 160.0| 110| 3.90| 2.875| 17.02|  0|  1|    4|    4|\n| 22.8|   4| 108.0|  93| 3.85| 2.320| 18.61|  1|  1|    4|    1|\n| 21.4|   6| 258.0| 110| 3.08| 3.215| 19.44|  1|  0|    3|    1|\n| 18.7|   8| 360.0| 175| 3.15| 3.440| 17.02|  0|  0|    3|    2|\n| 18.1|   6| 225.0| 105| 2.76| 3.460| 20.22|  1|  0|    3|    1|\n| 14.3|   8| 360.0| 245| 3.21| 3.570| 15.84|  0|  0|    3|    4|\n| 24.4|   4| 146.7|  62| 3.69| 3.190| 20.00|  1|  0|    4|    2|\n| 22.8|   4| 140.8|  95| 3.92| 3.150| 22.90|  1|  0|    4|    2|\n| 19.2|   6| 167.6| 123| 3.92| 3.440| 18.30|  1|  0|    4|    4|\n| 17.8|   6| 167.6| 123| 3.92| 3.440| 18.90|  1|  0|    4|    4|\n| 16.4|   8| 275.8| 180| 3.07| 4.070| 17.40|  0|  0|    3|    3|\n| 17.3|   8| 275.8| 180| 3.07| 3.730| 17.60|  0|  0|    3|    3|\n| 15.2|   8| 275.8| 180| 3.07| 3.780| 18.00|  0|  0|    3|    3|\n| 10.4|   8| 472.0| 205| 2.93| 5.250| 17.98|  0|  0|    3|    4|\n| 10.4|   8| 460.0| 215| 3.00| 5.424| 17.82|  0|  0|    3|    4|\n| 14.7|   8| 440.0| 230| 3.23| 5.345| 17.42|  0|  0|    3|    4|\n| 32.4|   4|  78.7|  66| 4.08| 2.200| 19.47|  1|  1|    4|    1|\n| 30.4|   4|  75.7|  52| 4.93| 1.615| 18.52|  1|  1|    4|    2|\n| 33.9|   4|  71.1|  65| 4.22| 1.835| 19.90|  1|  1|    4|    1|\n| 21.5|   4| 120.1|  97| 3.70| 2.465| 20.01|  1|  0|    3|    1|\n| 15.5|   8| 318.0| 150| 2.76| 3.520| 16.87|  0|  0|    3|    2|\n| 15.2|   8| 304.0| 150| 3.15| 3.435| 17.30|  0|  0|    3|    2|\n| 13.3|   8| 350.0| 245| 3.73| 3.840| 15.41|  0|  0|    3|    4|\n| 19.2|   8| 400.0| 175| 3.08| 3.845| 17.05|  0|  0|    3|    2|\n| 27.3|   4|  79.0|  66| 4.08| 1.935| 18.90|  1|  1|    4|    1|\n| 26.0|   4| 120.3|  91| 4.43| 2.140| 16.70|  0|  1|    5|    2|\n| 30.4|   4|  95.1| 113| 3.77| 1.513| 16.90|  1|  1|    5|    2|\n| 15.8|   8| 351.0| 264| 4.22| 3.170| 14.50|  0|  1|    5|    4|\n| 19.7|   6| 145.0| 175| 3.62| 2.770| 15.50|  0|  1|    5|    6|\n| 15.0|   8| 301.0| 335| 3.54| 3.570| 14.60|  0|  1|    5|    8|\n| 21.4|   4| 121.0| 109| 4.11| 2.780| 18.60|  1|  1|    4|    2|\n\n</div>\n:::\n:::\n\n\n## Task\n\n-   Download the Excel file \"cars.xlsx\" from the moodle course.\\\n-   Save it in your project directory.\\\n-   Import the data set and assign it to an object `dat`.\\\n-   Apply the `View()` function to see the dataset.\n\nNote: `View()` opens a new tab in RStudio with the content of a data frame (e.g. `View(dat)`).\n\n## Task\n\n-   Calculate the *mean* of `mpg` (miles per gallon) for cars with 4, 6, and 8 cylinders (variable `cly`).\n\n\n[**:-)**]{style=\"color: red;\"}\n\n\n## Task - solution\n\n-   Calculate the *mean* of `mpg` (miles per gallon) for cars with 4, 6, and 8 cylinders (variable `cly`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(dat$mpg[dat$cyl == 4])\nmean(dat$mpg[dat$cyl == 6])\nmean(dat$mpg[dat$cyl == 8])\n```\n:::\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 26.66364\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 19.74286\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 15.1\n```\n\n\n:::\n:::\n\n",
    "supporting": [
      "02b-Basics_misc_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}