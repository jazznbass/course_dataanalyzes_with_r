{
  "hash": "49b470646b3ee3f8bb22dd5a3f0a615c",
  "result": {
    "markdown": "---\ntitle: \"R Basic Concepts\"\nformat: revealjs\n---\n\n\n## Goals\n\n-   Basic concepts of the R language\n-   Object types: numbers, logic values, characters\n-   object structures: vectors, factors, data frames, lists\n\n# Basic concepts {background-image=\"img/bg-h1-3.jpg\"}\n\n## Functions\n\n::: incremental\n-   With a *function* you command the computer to do something.\n-   *functions* have a function name (e.g., `mean`, `sqrt`).\n-   *functions* take **arguments** to specify what to do.\n-   *arguments* have argument names as well.\n-   functions **always** consist of a function name followed by brackets.\n:::\n\n. . .\n\n`function_name(argument_name_1 = value, argument_2 = value, ...)`\n\n## Examples\n\n`sqrt()` calculates the square root\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsqrt(x = 16)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\n. . .\n\nYou can omit the argument name if it is the first argument\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsqrt(16)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\n. . .\n\nEven without arguments you still need the brackets\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndate()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Wed Oct 12 12:41:48 2022\"\n```\n:::\n:::\n\n\n## Comments\n\nIt is a good practice to add comments and notes to your code.\\\nEverything that is written behind a `#` will not executed as code.\\\nIf you want a comment to span across several line, you have to begin each line with a `#` symbol.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# This is a comment\n# across multiple lines\n```\n:::\n\n\nWithin RStudio, you can use comments to create headers to navigate through your code by ending a comment line with four `-` signs:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# section 2 ----\n```\n:::\n\n\n## \n\nYou can jump through your code by the list a the bottom of your source panel or, after activating the outline panel, at the right of your source panel:\n\n![](images/paste-0F60DB72.png)\n\n## Help files\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function\nhelp(\"sqrt\")\n\n# Short cut\n?sqrt\n```\n:::\n\n\n... or use the bottom-right help panel in R Studio\n\n## Task {background-image=\"img/bg-task.png\"}\n\nTake a look at the `mean()` function (hint: use the `help()` function):\\\nWhat *arguments* could be specified?\n\n\n[**:-)**]{style=\"color: red;\"}\n\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhelp(\"mean\")\n?mean\n```\n:::\n\n\n![](images/paste-397F56B8.png)\n\n## Operations\n\nOperations are a special kind of functions that have a shortcut.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# function `assign` and the short cut\nassign(x = \"y\", value = 10)\n\ny <- 10\n```\n:::\n\n\n.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# function `+`\n\"+\"(e1 = 10, e2 = 10)\n\n10 + 10\n```\n:::\n\n\n.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# function `print`\nprint(x = y)\n\ny\n```\n:::\n\n\n## Objects\n\nObjects have an object name and contain data.\\\nThe data are assigned to an object with the `<-` or `=` operator.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 10\n```\n:::\n\n\nYou can see the value(s) of an object with the `print()` function, or by just typing the object name:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(x)\nx\n```\n:::\n\n\n------------------------------------------------------------------------\n\nObjects can be used for operators and arguments in functions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 16\ny <- 13\n\nx * y\nsqrt(x)\n```\n:::\n\n\nYou can write the return values of a function into a new object:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nz <- sqrt(x)\nz\n```\n:::\n\n\nAnd you can combine these:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexp(z) + sqrt(y)\n```\n:::\n\n\n## Task {background-image=\"img/bg-task.png\"}\n\nAssign the values `40 and 24` to the variables `a and b`.\\\nCalculate the square root of the sum of `a and b`.\n\n\n[**:-)**]{style=\"color: red;\"}\n\n\n\n## Task - solution {background-image=\"img/bg-task.png\"}\n\nAssign the values `40 and 24` to the variables `a and b`.\\\nCalculate the square root of the sum of `a and b`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 40\nb <- 24\nsqrt(a + b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n:::\n\n\n# Data classes {background-image=\"img/bg-h1-3.jpg\"}\n\n## Data types\n\nThe data of objects can be numbers, text or TRUE/FALSE values. These are called **data types**\n\n-   **Numeric**: e.g. Integer or decimal numbers `1, 1.35`\n-   **Character**: Always between \" \" or ' ' signs: `\"A\", 'House'`\n-   **Logical**: `TRUE, FALSE`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 10\ny <- \"Hello world!\"\nz <- FALSE\n```\n:::\n\n\n## Data structures\n\nData are organized in structures:\n\n::: incremental\n-   **Vectors**: A series of elements of the same data type.\n-   **List**: A series of elements, each element can be of any data type or data structure.\n-   **Data Frames**: A list with one vector for each element and all vectors of the same length\n-   **Matrix**: A two dimensional table with values of the same data type.\n-   **Array**: Like a matrix but with more dimensions.\n:::\n\n## Data structures\n\nData are organized in structures:\n\n-   [**Vectors**: A series of elements of the same data type.]{.em}\n-   [**List**: A series of elements, each element can be of any data type or data structure.]{.em}\n-   [**Data Frames**: A list with one vector for each element and all vectors of the same length.]{.em}\n-   **Matrix**: A two dimensional table with values of the same data type.\n-   **Array**: Like a matrix but with more dimensions.\n\n# Vectors {background-image=\"img/bg-h1-3.jpg\"}\n\n## How to build a vector\n\nYou create a vector with the `c()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(2, 4, 6, 3, 7)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 4 6 3 7\n```\n:::\n\n```{.r .cell-code}\ny <- c(2, 4, 6, 3, 7)\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 4 6 3 7\n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\nThe colon `:` operator creates a numerical sequence:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1:10\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n:::\n:::\n\n\nThis is a shortcut for `seq(1, 10)`\n\n------------------------------------------------------------------------\n\nYou can build a vector of any data type:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfirstname <- c(\"Dustin\", \"Mike\", \"Will\")\ncurly <- c(TRUE, FALSE, FALSE)\nage <- c(9, 11, 10)\n```\n:::\n\n\nBut do not mix data types in a vector. You will get an error or they are internally changed to fit one data type:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage <- c(\"quite young\", 10, 12, \"very old\")\nage\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"quite young\" \"10\"          \"12\"          \"very old\"   \n```\n:::\n:::\n\n\nHere `10` and `12` are changed to a character data type `\"10\"` and `\"12\"`.\n\n## Task {.build background-image=\"img/bg-task.png\"}\n\nCreate a vector (named `friends` comprising four names of your friends.\n\n\n[**:-)**]{style=\"color: red;\"}\n\n\n\n## Task - solution {background-image=\"img/bg-task.png\"}\n\nCreate a vector (named `friends` comprising four names of your friends.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfriends <- c(\"Matthias\", \"Markus\", \"Thomas\", \"Christian\")\n```\n:::\n\n\n## Combining vectors to new vectors {.build}\n\nWhen an object is a vector it can be reused within the `c()` function to build a new vector:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(3, 5, 7)\nc(x, 5, 8, 9)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 5 7 5 8 9\n```\n:::\n:::\n\n\n## Combining vectors to new vectors {.build}\n\nBe careful not to confuse an object name with a character:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(\"A\", \"B\", \"C\")\nc(\"x\", \"D\", \"E\", \"F\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"x\" \"D\" \"E\" \"F\"\n```\n:::\n\n```{.r .cell-code}\nc(x, \"D\", \"E\", \"F\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\"\n```\n:::\n\n```{.r .cell-code}\nc(A, B, C)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'A' not found\n```\n:::\n:::\n\n\n## Task {background-image=\"img/bg-task.png\"}\n\nCreate two vectors\\\n`x <- c(\"I\", \"am\", \"a\")` and\\\n`y <- \"person!\"`\n\nNow create a new vector by reusing `x` and `y` that looks like this when printed:\n\n`[1] \"I\"      \"Am\"     \"a\"      \"cool\"   \"person!\"`\n\n\n[**:-)**]{style=\"color: red;\"}\n\n\n\n## Task - solution {background-image=\"img/bg-task.png\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(\"I\", \"am\", \"a\")\ny <- \"person!\"\nc(x, \"cool\", y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"I\"       \"am\"      \"a\"       \"cool\"    \"person!\"\n```\n:::\n:::\n\n\nUse the `paste()` function to create a single string.  \nThe argument `collapse` defines a character string to set between elements:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npaste(c(x, \"cool\", y), collapse = \" \")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"I am a cool person!\"\n```\n:::\n:::\n\n\n\n## Missing values\n\nA missing value is represented with `NA` (**N**ot **A**vailable).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage <- c(9, NA, 11)\nname <- c(\"Tick\", \"Trick\", NA)\nage\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  9 NA 11\n```\n:::\n\n```{.r .cell-code}\nname\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Tick\"  \"Trick\" NA     \n```\n:::\n:::\n\n\n## Task {background-image=\"img/bg-task.png\"}\n\n1. Create a vector with the values  \n   `2, 5, 7, 4, 7, 2, 6`. \n2. Create a vector with the values  \n   `2, NA, 7, 4, NA, 2, 6`. \n\nCalculate the `mean` of these two vectors.  \nNote: Use the `mean()` function to calculate the mean.  \nNote: Read through `?mean` if you encounter problems.\n\n\n[**:-)**]{style=\"color: red;\"}\n\n\n\n## Task - solution {background-image=\"img/bg-task.png\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx1 <- c(2, 5, 7, 4, 7, 2, 6)\nx2 <- c(2, NA, 7, 4, NA, 2, 6)\n\nmean(x1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4.714286\n```\n:::\n\n```{.r .cell-code}\nmean(x2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\nmean(x2, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4.2\n```\n:::\n:::\n\n\n## Named vectors\n\nA named vector is a vector with a name for each element:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage <- c(James = 34, Hella = 30, Armin = 43)\nage\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nJames Hella Armin \n   34    30    43 \n```\n:::\n\n```{.r .cell-code}\nglasses <- c(James = TRUE, Hella = FALSE, Armin = TRUE)\nglasses\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nJames Hella Armin \n TRUE FALSE  TRUE \n```\n:::\n:::\n\n\nYou get and set the names of a named object with the `names()` argument:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(age)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"James\" \"Hella\" \"Armin\"\n```\n:::\n\n```{.r .cell-code}\nnames(age) <- c(\"Judith\", \"Jerom\", \"Klaus\")\nage\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nJudith  Jerom  Klaus \n    34     30     43 \n```\n:::\n:::\n\n\n## Converting vectors\n\nthe `as` functions convert vectors between data types:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.character(1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1\" \"2\" \"3\" \"4\" \"5\"\n```\n:::\n\n```{.r .cell-code}\nas.numeric(c(FALSE, TRUE, FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0 1 0\n```\n:::\n\n```{.r .cell-code}\nas.logical(c(0,1,0,1,1))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE  TRUE FALSE  TRUE  TRUE\n```\n:::\n\n```{.r .cell-code}\nas.numeric(c(\"4711\", \"0814\", \"007\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4711  814    7\n```\n:::\n:::\n\n\n. . .\n\nBut unexpected results may occure:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.numeric(c(\"1\", \"2\", \"3.1\", \"3,2\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.0 2.0 3.1  NA\n```\n:::\n\n```{.r .cell-code}\nas.logical(c(1,0,1,0,1,3))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE  TRUE FALSE  TRUE  TRUE\n```\n:::\n:::\n\n\n# Factors {background-image=\"img/bg-h1-3.jpg\"}\n\n## A factor\n\nA factor is a vector with labels for vector levels.\\\nA factor is created with the `factor()` function.  \nThe `levels` argument defines the possible factor levels.  \nThe `labels` argument defines the corresponding labels.\n\nExample:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsen <- factor(\n  c(1, 0, 1, 0, 0, 0), \n  levels =  c(0, 1, 2), \n  labels = c(\"Without_SEN\", \"With_SEN\", \"unclear\")\n)\nsen\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] With_SEN    Without_SEN With_SEN    Without_SEN Without_SEN Without_SEN\nLevels: Without_SEN With_SEN unclear\n```\n:::\n:::\n\n\n## Task {background-image=\"img/bg-task.png\"}\n\nBuild a factor for `gender` with the labels `male, female, non-binary`. Include a vector for six fictitious gender values.\n\n\n[**:-)**]{style=\"color: red;\"}\n\n\n\n## Task - solution {background-image=\"img/bg-task.png\"}\n\nBuild a factor for `gender` with the labels `male, female, non-binary`. Include a vector for six fictitious gender values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngender <- factor(\n  c(1, 3, 2, 1, 2, 1), \n  levels = 1:3, \n  labels = c(\"male\", \"female\", \"non-binary\")\n)\ngender\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] male       non-binary female     male       female     male      \nLevels: male female non-binary\n```\n:::\n:::\n\n\n# Data frames {background-image=\"img/bg-h1-3.jpg\"}\n\n## How to build a data frame {.build .smaller}\n\nData frames are the standard object for storing research data. They contain variables (columns) and cases (rows). A data frame is created with the `data.frame()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# For better convenience I have inserted additional linebreaks and spaces\nstudy <- data.frame(\n  sen    = c(0, 1, 0, 1, 0, 1),\n  gender = c(\"M\", \"M\", \"F\", \"M\", \"F\", \"F\"),\n  age    = c(12, 13, 11, 10, 11, 14),\n  IQ     = c(90, 85, 90, 87, 99, 89)\n)\nstudy\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| sen|gender | age| IQ|\n|---:|:------|---:|--:|\n|   0|M      |  12| 90|\n|   1|M      |  13| 85|\n|   0|F      |  11| 90|\n|   1|M      |  10| 87|\n|   0|F      |  11| 99|\n|   1|F      |  14| 89|\n\n</div>\n:::\n:::\n\n\n## Extracting a variable from a data frame\n\nVariables within a data frame are extracted with double square brackets.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudy[[\"sen\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0 1 0 1 0 1\n```\n:::\n\n```{.r .cell-code}\nstudy[[\"IQ\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 90 85 90 87 99 89\n```\n:::\n:::\n\n\nAn alternative approach is to use the `$` sign: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudy$sen\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0 1 0 1 0 1\n```\n:::\n:::\n\n\n# Lists {background-image=\"img/bg-h1-3.jpg\"}\n\n## How to construct a list\n\nLists are the most versatile data structures in R and are very important for understanding R.\n\nA list is a series of elements with arbitrary data types and structures. A list is constructed with the `list()` function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist(1:3, \"Hallo!\", TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 1 2 3\n\n[[2]]\n[1] \"Hallo!\"\n\n[[3]]\n[1] TRUE\n```\n:::\n:::\n\n\n##\n\nIt is best to name list elements:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_list <- list(\n  numbers = 1:3,  \n  string = \"Hallo!\", \n  logical = TRUE\n)\nmy_list\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$numbers\n[1] 1 2 3\n\n$string\n[1] \"Hallo!\"\n\n$logical\n[1] TRUE\n```\n:::\n:::\n\n\n## Extracting list elements\n\nYou can extract a list element with `[[` or `$` signs:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_list[[\"numbers\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3\n```\n:::\n\n```{.r .cell-code}\nmy_list[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3\n```\n:::\n\n```{.r .cell-code}\nmy_list$numbers\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3\n```\n:::\n:::\n\n\n##\n\nlists can be very complex with lists nested in lists:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncomplex_list <- list(\n  list = list(A = 1, B = 1:3),\n  list_in_list = list(C = list(D = 4), E = 5)\n)\ncomplex_list\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$list\n$list$A\n[1] 1\n\n$list$B\n[1] 1 2 3\n\n\n$list_in_list\n$list_in_list$C\n$list_in_list$C$D\n[1] 4\n\n\n$list_in_list$E\n[1] 5\n```\n:::\n:::\n\n\n## \n\nThe `str()` function returns the structure of an R object\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(complex_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 2\n $ list        :List of 2\n  ..$ A: num 1\n  ..$ B: int [1:3] 1 2 3\n $ list_in_list:List of 2\n  ..$ C:List of 1\n  .. ..$ D: num 4\n  ..$ E: num 5\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    function fireSlideChanged(previousSlide, currentSlide) {\n\n      // dispatch for htmlwidgets\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for reveal\n    if (window.Reveal) {\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\n        fireSlideChanged(event.previousSlide, event.currentSlide);\n      });\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}