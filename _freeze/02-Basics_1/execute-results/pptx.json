{
  "hash": "1deaa77863becd1889e3eacd476b4239",
  "result": {
    "markdown": "---\ntitle: \"R Basic Concepts\"\nformat: pptx\n---\n\n\n## Goals\n\n- Basic concepts of R: library, function, argument \n- Object types: numbers, logic values, characters\n- object structures: vectors, data frames\n- Sophisticated subsetting\n- Import and export data to Microsoft Excel, csv files, SPSS\n- Install and update packages (cran, source, and other repositories)\n- Organize your work in R Studio (Projects)\n\n## Goals\n\n- [Basic concepts of R: library, function, argument]{.em} \n- [Object types: numbers, logic values, characters]{.em}\n- [object structures: vectors, data frames]{.em}\n- Sophisticated subsetting\n- Import and export data to Microsoft Excel, csv files, SPSS\n- Install and update packages (cran, source, and other repositories)\n- Organize your work in R Studio (Projects)\n\n# Basic concepts {background-image=\"img/bg-h1-3.jpg\"}\n\n## Functions\n\n::: incremental\n- With a *function* you command the computer to do something.\n- *functions* have a function name (e.g., `mean`, `sqrt`).\n- *functions* take **arguments** to specify what to do.\n- *arguments* have argument names as well.\n- functions **always** consist of a function name followed by brackets.\n:::\n\n. . .\n\n`function_name(argument_name_1 = value, argument_2 = value, ...)`\n\n## Examples\n\n`sqrt()` calculates the square root\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsqrt(x = 16)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\n. . .\n\nYou can omit the argument name if it is the first argument\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsqrt(16)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\n. . .\n\nEven without arguments you still need the brackets\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndate()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Fri Sep  2 13:12:32 2022\"\n```\n:::\n:::\n\n\n## Help files\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function\nhelp(\"sqrt\")\n\n# Short cut\n?sqrt\n```\n:::\n\n\n... or use the bottom-right help panel in R Studio\n\n## Task \n\nTake a look at the `mean()` function (hint: use the `help()` function):  \nWhat *arguments* could be specified?\n\n\n[**:-)**]{style=\"color: red;\"}\n\n\n\n---\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhelp(\"mean\")\n?mean\n```\n:::\n\n\nThe mean function takes three arguments:\n\n* x : A vector with values\n* trim : A fraction (e.g. 0.3) of values that are trimmed from each each end of the vector x \n* na.rm : If TRUE (na.rm = TRUE), missing values (NAs) are removed before calculating the mean\n\n## Operations\n\nOperations are a special kind of functions that have a shortcut.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# function `assign` and the short cut\nassign(x = \"y\", value = 10)\n\ny <- 10\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# function `+`\n\"+\"(e1 = 10, e2 = 10)\n\n10 + 10\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# function `print`\nprint(x = y)\n\ny\n```\n:::\n\n\n## Objects\n\nObjects have an object name and contain data.  \nThe data are assigned to an object with the `<-` or `=` operator.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 10\n```\n:::\n\n\nYou can see the value(s) of an object with the `print()` function, or by just typing the object name:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(x)\nx\n```\n:::\n\n---\n\nObjects can be used for operators and arguments in functions:\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 16\ny <- 13\n\nx * y\nsqrt(x)\n```\n:::\n\nYou can write the return values of a function into a new object:\n\n::: {.cell}\n\n```{.r .cell-code}\nz <- sqrt(x)\nz\n```\n:::\n\nAnd you can combine these:\n\n::: {.cell}\n\n```{.r .cell-code}\nexp(z) + sqrt(y)\n```\n:::\n\n## Task\n\nAssign the values `40 and 24` to the variables `a and b`.  \nCalculate the square root of the sum of `a and b`.\n\n{{< include _stop.qmd >}}\n\n## Task - solution\n\nAssign the values `40 and 24` to the variables `a and b`.  \nCalculate the square root of the sum of `a and b`.\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 40\nb <- 24\nsqrt(a + b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n:::\n\n## Data types\n\nThe data of objects can be numbers, text or TRUE/FALSE values. \nThese are called **data types**\n\n- **Numeric**: e.g. Integer or decimal numbers `1, 1.35` \n- **Character**: Always between \" \" or ' ' signs: `\"A\", 'House'`\n- **Logical**:  `TRUE, FALSE`\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 10\ny <- \"Hello world!\"\nz <- FALSE\n```\n:::\n\n## Data structures\n\nData are organized in structures:\n\n:::incremental\n- **Vectors**: A chain of values.\n- **List**: A series of elements, each containing an object\n- **Data Frames**: A list with one vector for each element and all vectors of the same length\n- **Matrix**: A two dimensional table with values of the same data type.\n- **Array**: Like a matrix but with more dimensions.\n:::\n\n## Data structures\n\nData are organized in structures:\n\n- [**Vectors**: A chain of values]{.em}\n- **List**: A series of elements, each containing an object\n- [**Data Frames**: A list with one vector for each element and all vectors of the same length]{.em}\n- **Matrix**: A two dimensional table with values of the same data type.\n- **Array**: Like a matrix but with more dimensions.\n\n## How to build a vector\n\nYou create a vector with the `c()` function:\n\n::: {.cell}\n\n```{.r .cell-code}\nc(2, 4, 6, 3, 7)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 4 6 3 7\n```\n:::\n\n```{.r .cell-code}\ny <- c(2, 4, 6, 3, 7)\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 4 6 3 7\n```\n:::\n:::\n\n---\n\n\nThe colon `:` operator creates a numerical sequence:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1:10\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n:::\n:::\n\n\nThis is a shortcut for `seq(1, 10)`\n\n---\n\nYou can build a vector of any data type:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfirstname <- c(\"Dustin\", \"Mike\", \"Will\")\ncurly <- c(TRUE, FALSE, FALSE)\nage <- c(9, 11, 10)\n```\n:::\n\n\nBut do not mix data types in a vector. You will get an error or they are internally changed to fit one data type:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage <- c(\"quite young\", 10, 12, \"very old\")\nage\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"quite young\" \"10\"          \"12\"          \"very old\"   \n```\n:::\n:::\n\n\nHere `10` and `12` are changed to a character data type `\"10\"` and `\"12\"`.\n\n## Task {.build}\n\nCreate a vector (named `friends` comprising four names of your friends.\n\n\n[**:-)**]{style=\"color: red;\"}\n\n\n\n## Task - solution\n\nCreate a vector (named `friends` comprising four names of your friends.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfriends <- c(\"Matthias\", \"Markus\", \"Thomas\", \"Christian\")\n```\n:::\n\n\n## Combining vectors to new vectors {.build}\n\nWhen an object is a vector it can be reused within the `c()` function to build a new vector:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(3, 5, 7)\nc(x, 5, 8, 9)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 5 7 5 8 9\n```\n:::\n:::\n\n\n## Combining vectors to new vectors {.build}\n\nBe careful not to confuse an object name with a character:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(\"A\", \"B\", \"C\")\nc(\"x\", \"D\", \"E\", \"F\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"x\" \"D\" \"E\" \"F\"\n```\n:::\n\n```{.r .cell-code}\nc(x, \"D\", \"E\", \"F\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\"\n```\n:::\n\n```{.r .cell-code}\nc(A, B, C)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'A' not found\n```\n:::\n:::\n\n\n## Task {.build}\n\nCreate two vectors  \n`x <- c(\"I\", \"am\", \"a\")` and  \n`y <- \"person!\"`\n\nNow create a new vector by reusing `x` and `y` that looks like this when printed:\n\n`[1] \"I\"      \"Am\"     \"a\"      \"cool\"   \"person!\"`\n\n\n\n[**:-)**]{style=\"color: red;\"}\n\n\n\n## Task - solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(\"I\", \"am\", \"a\")\ny <- \"person!\"\nc(x, \"cool\", y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"I\"       \"am\"      \"a\"       \"cool\"    \"person!\"\n```\n:::\n:::\n\n\n\n## Missing values\n\nA missing value is represented with `NA` (**N**ot **A**vailable).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage <- c(9, NA, 11)\nname <- c(\"Tick\", \"Trick\", NA)\nage\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  9 NA 11\n```\n:::\n\n```{.r .cell-code}\nname\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Tick\"  \"Trick\" NA     \n```\n:::\n:::\n\n\n## Task {.build}\n\nCreate a vector with the values `2, 5, 7, 4, 7, 2, 6`. Calculate the `mean` of these values. (Note: Use the `mean()` function to calculate the mean).\n\n\n[**:-)**]{style=\"color: red;\"}\n\n\n\n## Task - solution\n\nCreate a vector with the values `2, 5, 7, 4, 7, 2, 6`. Calculate the `mean` of these values. (Note: Use the `mean()` function to calculate the mean).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(2, 5, 7, 4, 7, 2, 6)\nmean(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4.714286\n```\n:::\n:::\n\n\n## Task {.build}\n\nCreate a vector with the values `2, NA, 7, 4, NA, 2, 6`. Calculate the `mean` of these values.  \n(Note: Read through `?mean` if you encounter problems.)\n\n\n\n[**:-)**]{style=\"color: red;\"}\n\n\n\n\n## Task - solution\n\nCreate a vector with the values `2, NA, 7, 4, NA, 2, 6`. Calculate the `mean` of these values.  \n(Note: Read through `?mean` if you encounter problems.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(2, NA, 7, 4, NA, 2, 6)\nmean(x, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4.2\n```\n:::\n:::\n\n\n\n## Selecting elements with square brackets {.build}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames <- c(\"Sheldon\", \"Leonard\", \"Penny\", \"Amy\")\nnames[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Sheldon\"\n```\n:::\n\n```{.r .cell-code}\n# Pass a vector to extract multiple elements:\nnames[c(1,4)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Sheldon\" \"Amy\"    \n```\n:::\n:::\n\n\n## Task {.build}\n\nTake the vector  \n`names <- c(\"Sheldon\", \"Leonard\", \"Penny\", \"Amy\")`  \nand reorder it to get the following result:  \n`[1] \"Sheldon\" \"Amy\"     \"Sheldon\" \"Amy\"     \"Leonard\" \"Penny\"`\n\n\n[**:-)**]{style=\"color: red;\"}\n\n\n\n\n## Task - solution \n\nTake the vector  \n`names <- c(\"Sheldon\", \"Leonard\", \"Penny\", \"Amy\")`  \nand reorder it to get the following result:  \n`[1] \"Sheldon\" \"Amy\"     \"Sheldon\" \"Amy\"     \"Leonard\" \"Penny\"`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(1, 4, 1, 4, 2, 3)\nnew_order <- names[x]\nnew_order\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Sheldon\" \"Amy\"     \"Sheldon\" \"Amy\"     \"Leonard\" \"Penny\"  \n```\n:::\n:::\n\n\n## A factor {.build}\n\nA factor is a vector with labels for vector levels.  \nE.g., a vector contains the values 0 and 1 where 0 stands for \"with behavioral problems\" and 1 stands for \"without behavioral problems\".\n\nA factor is created with the `factor()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsen <- factor(\n  c(1, 0, 1, 0, 0, 0), \n  levels =  c(0, 1), \n  labels = c(\"Without_SEN\", \"With_SEN\")\n)\nsen\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] With_SEN    Without_SEN With_SEN    Without_SEN Without_SEN Without_SEN\nLevels: Without_SEN With_SEN\n```\n:::\n:::\n\n\n## Task {.build}\n\nBuild a factor for `gender` with the labels `male, female, non-binary`. Include a vector for six fictitious gender values.\n\n\n[**:-)**]{style=\"color: red;\"}\n\n\n\n\n## Task - solution\n\nBuild a factor for `gender` with the labels `male, female, non-binary`. Include a vector for six fictitious gender values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngender <- factor(\n  c(1, 3, 2, 1, 2, 1), \n  levels = 1:3, \n  labels = c(\"male\", \"female\", \"non-binary\")\n)\ngender\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] male       non-binary female     male       female     male      \nLevels: male female non-binary\n```\n:::\n:::\n\n\n## How to build a data frame {.build .smaller}\n\nData frames are the standard object for storing research data. They contain variables (columns) and cases (rows). A data frame is created with the `data.frame()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# For better convenience I have inserted additional linebreaks and spaces\nstudy <- data.frame(\n  sen    = c(0, 1, 0, 1, 0, 1),\n  gender = c(\"M\", \"M\", \"F\", \"M\", \"F\", \"F\"),\n  age    = c(12, 13, 11, 10, 11, 14),\n  IQ     = c(90, 85, 90, 87, 99, 89)\n)\nstudy\n```\n\n::: {.cell-output-display}\n| sen|gender | age| IQ|\n|---:|:------|---:|--:|\n|   0|M      |  12| 90|\n|   1|M      |  13| 85|\n|   0|F      |  11| 90|\n|   1|M      |  10| 87|\n|   0|F      |  11| 99|\n|   1|F      |  14| 89|\n:::\n:::\n\n\n## Extracting a variable from a data frame\n\nVariables within a data frame are extracted with double square brackets.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudy[[\"sen\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0 1 0 1 0 1\n```\n:::\n\n```{.r .cell-code}\nstudy[[\"IQ\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 90 85 90 87 99 89\n```\n:::\n:::\n\n\n*Note: an alternative approach is to use the `$` sign: `study$sen`. But we will not use this approach for now.*\n\n## Subsetting a data frame\n\nSpecific cases are selected within square brackets: \n`object_name[rows, columns]`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudy[5, ]  # filter a row\n```\n\n::: {.cell-output-display}\n|   | sen|gender | age| IQ|\n|:--|---:|:------|---:|--:|\n|5  |   0|F      |  11| 99|\n:::\n\n```{.r .cell-code}\nstudy[c(2, 6), ] # filter two rows\n```\n\n::: {.cell-output-display}\n|   | sen|gender | age| IQ|\n|:--|---:|:------|---:|--:|\n|2  |   1|M      |  13| 85|\n|6  |   1|F      |  14| 89|\n:::\n:::\n\n\n---\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudy[c(2, 6), \"IQ\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 85 89\n```\n:::\n\n```{.r .cell-code}\nstudy[c(2, 6), c(\"sen\", \"IQ\")]\n```\n\n::: {.cell-output-display}\n|   | sen| IQ|\n|:--|---:|--:|\n|2  |   1| 85|\n|6  |   1| 89|\n:::\n:::\n\n\n---\n\nYou could also use numbers to address the columns:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudy[, 2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"M\" \"M\" \"F\" \"M\" \"F\" \"F\"\n```\n:::\n\n```{.r .cell-code}\nstudy[c(2, 6), c(1, 3)]\n```\n\n::: {.cell-output-display}\n|   | sen| age|\n|:--|---:|---:|\n|2  |   1|  13|\n|6  |   1|  14|\n:::\n:::\n\n\n## Task {.build}\n\nPlease create a new data frame (`study2`) comprising the `gender` and `age` variables for the cases 1, 3, and 5 of the `study` data frame.\n\n\n[**:-)**]{style=\"color: red;\"}\n\n\n\n\n## Task - solution\n\nPlease create a new data frame (`study2`) comprising the `gender` and `age` variables for the cases 1, 3, and 5 of the `study` data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudy2 <- study[c(1, 3, 5), c(\"gender\", \"age\")]\nstudy2\n```\n\n::: {.cell-output-display}\n|   |gender | age|\n|:--|:------|---:|\n|1  |M      |  12|\n|3  |F      |  11|\n|5  |F      |  11|\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}