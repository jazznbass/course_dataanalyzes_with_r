{
  "hash": "c4a3e8b68b0d73301deeca938d518ac8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Basic statistics\"\nformat: revealjs\n---\n\n\n\n## Goals  {background-image=\"images/bg-goal.jpg\" background-opacity=0.3}\n\n-   You know some functions for basic statistical analyses.\n-   You can create contingency tables.\n-   You learn to integrate filtering, selecting, grouping, and subsetting of data frames with functions for statistical analyses.\n\n# Descriptive statistics {background-image=\"images/bg-h1-3.jpg\"}\n\n## Some basic statistical functions\n\n-   `min()`, `max()`: Minimum and maximum\n-   `mean()`, `median()`: Mean and median\n-   `sd()`, `var()`: Standard deviation and variance\n-   `mad()`: Median absolute deviation\n-   `quantile()`: Percentile / quantile\n\n## Task\n\n-   Take the `mtcars` dataset\n-   Create a new variable `lpk` (liters per 100km) from `mpg`\\\n    (Formula: `lpk = 282.5 / mpg`)\n-   Calculate grouped by cylinders (`cyl`): mean, sd, median, mad, min, max of `lpk`\n-   Round all values by one decimal\n-   Hint: Use the `tidyverse` or `dplyr` library\n\n\n[**:-)**]{style=\"color: red;\"}\n\n\n##  {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars %>% \n  mutate(lpk = 282.5 / mpg) %>% \n  group_by(cyl) %>% \n  summarise(\n    mean = mean(lpk),\n    sd = sd(lpk),\n    median = median(lpk),\n    mad = mad(lpk),\n    min = min(lpk),\n    max = max(lpk)\n  ) %>%\n  round(1) \n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| cyl| mean|  sd| median| mad|  min|  max|\n|---:|----:|---:|------:|---:|----:|----:|\n|   4| 10.9| 1.8|   10.9| 2.3|  8.3| 13.2|\n|   6| 14.4| 1.1|   14.3| 1.3| 13.2| 15.9|\n|   8| 19.3| 3.8|   18.6| 1.9| 14.7| 27.2|\n\n</div>\n:::\n:::\n\n\n## \n\nWhat is happening here?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars <- mutate(mtcars, \n  transmission = factor(am, labels = c(\"Manual\", \"Automatic\"))\n)\n```\n:::\n\n\n## \n\nNow, lets calculate the stats for the transmission type:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars %>% \n  mutate(lpk = 282.5 / mpg) %>% \n  group_by(transmission) %>% \n  summarise(\n    mean = mean(lpk),\n    sd = sd(lpk),\n    median = median(lpk),\n    mad = mad(lpk),\n    min = min(lpk),\n    max = max(lpk)\n  ) \n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|transmission |     mean|       sd|   median|      mad|       min|      max|\n|:------------|--------:|--------:|--------:|--------:|---------:|--------:|\n|Manual       | 17.35861| 4.339156| 16.32948| 3.344815| 11.577869| 27.16346|\n|Automatic    | 12.33851| 3.341021| 12.39035| 3.028011|  8.333333| 18.83333|\n\n</div>\n:::\n:::\n\n\n## \n\n... and round the results\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars %>% \n  mutate(lpk = 282.5 / mpg) %>% \n  group_by(transmission) %>% \n  summarise(\n    mean = mean(lpk),\n    sd = sd(lpk),\n    median = median(lpk),\n    mad = mad(lpk),\n    min = min(lpk),\n    max = max(lpk)\n  ) %>%\n  round(1)\n```\n:::\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nError in Math.data.frame(list(transmission = 1:2, mean = c(17.3586131968484, : \nnon-numeric-alike variable(s) in data frame: transmission\n```\n\n\n:::\n:::\n\n\nups :-( ... what went wrong?\n\n## \n\nSolution: only `round` variables that are numeric:\n\n-   `is.numeric()` returns a TRUE or FALSE for a vector (`is.numeric(1:5)`; `is.numeric(c(\"A\", \"B\"))`)\\\n-   `across()` specifies for `mutate()`which variable to select.\n\n`mutate(across(.cols, .fns, ... ))`:\n\n-   .cols := columns so select\\\n-   .fns := a function to apply\\\n-   ... := arguments to that function\n\n## \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars %>% \n  mutate(lpk = 282.5 / mpg) %>% \n  group_by(transmission) %>% \n  summarise(\n    mean = mean(lpk),\n    sd = sd(lpk),\n    median = median(lpk),\n    mad = mad(lpk),\n    min = min(lpk),\n    max = max(lpk)\n  ) %>%\n  mutate(across(where(is.numeric), round, 1))\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|transmission | mean|  sd| median| mad|  min|  max|\n|:------------|----:|---:|------:|---:|----:|----:|\n|Manual       | 17.4| 4.3|   16.3| 3.3| 11.6| 27.2|\n|Automatic    | 12.3| 3.3|   12.4| 3.0|  8.3| 18.8|\n\n</div>\n:::\n:::\n\n\n# Tables {background-image=\"images/bg-h1-3.jpg\"}\n\n## Tables in base R\n\n-   `table()`: Shows frequencies of nominal scaled variables.\n-   `prop.table()`: Calculates proportions from frequency tables.\n-   `addmargins()`: Adds margins to tables.\n\n## Example one dimensional {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntab <- table(mtcars$cyl) # frequencies\ntab\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n 4  6  8 \n11  7 14 \n```\n\n\n:::\n\n```{.r .cell-code}\nprop.table(tab) # proportions\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n      4       6       8 \n0.34375 0.21875 0.43750 \n```\n\n\n:::\n\n```{.r .cell-code}\nprop.table(tab) * 100 # percentages \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n     4      6      8 \n34.375 21.875 43.750 \n```\n\n\n:::\n:::\n\n\n## Example two dimensional {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntab <- table(mtcars$cyl, mtcars$am)\ntab\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   \n     0  1\n  4  3  8\n  6  4  3\n  8 12  2\n```\n\n\n:::\n\n```{.r .cell-code}\nprop.table(tab) * 100\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   \n         0      1\n  4  9.375 25.000\n  6 12.500  9.375\n  8 37.500  6.250\n```\n\n\n:::\n:::\n\n\n## Example two dimensional with percentages by rows and columns {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntab <- table(mtcars$cyl, mtcars$am)\nprop.table(tab, margin = 1) * 100  # sum of each row is 100%\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   \n           0        1\n  4 27.27273 72.72727\n  6 57.14286 42.85714\n  8 85.71429 14.28571\n```\n\n\n:::\n\n```{.r .cell-code}\nprop.table(tab, margin = 2) * 100 # sum of each column is 100%\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   \n           0        1\n  4 15.78947 61.53846\n  6 21.05263 23.07692\n  8 63.15789 15.38462\n```\n\n\n:::\n:::\n\n\n## Example with added margins {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntab <- table(mtcars$cyl, mtcars$am)\ntab <- prop.table(tab, margin = 2) * 100\naddmargins(tab)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     \n              0         1       Sum\n  4    15.78947  61.53846  77.32794\n  6    21.05263  23.07692  44.12955\n  8    63.15789  15.38462  78.54251\n  Sum 100.00000 100.00000 200.00000\n```\n\n\n:::\n:::\n\n\n## Task\n\n-   Take the `heights` dataset from the `dslabs` library.\\\n-   Create a cross table depicting: The percentage of females and males that are above and below a height of 170 cm.\n\n## \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dslabs)\n\nheights$category[heights$height * 2.54 <= 170] <- \"% <= 170 cm\"\nheights$category[heights$height * 2.54 > 170] <- \"% > 170 cm\"\n\ntab <- table(heights$sex, heights$category)\ntab <- prop.table(tab, margin = 1) * 100\ntab <- round(tab, 1)\ntab\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        \n         % <= 170 cm % > 170 cm\n  Female        71.0       29.0\n  Male          19.8       80.2\n```\n\n\n:::\n:::\n\n\n## Tables with dplyr\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars %>% \n  group_by(cyl, am) %>% \n  summarise(n = n())\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| cyl| am|  n|\n|---:|--:|--:|\n|   4|  0|  3|\n|   4|  1|  8|\n|   6|  0|  4|\n|   6|  1|  3|\n|   8|  0| 12|\n|   8|  1|  2|\n\n</div>\n:::\n:::\n\n\n## Shortcut for simple count tables\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Because it is shorter, I don't use pipes here (but I could!)\ncount(mtcars, cyl) \n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| cyl|  n|\n|---:|--:|\n|   4| 11|\n|   6|  7|\n|   8| 14|\n\n</div>\n:::\n\n```{.r .cell-code}\ncount(mtcars, cyl, am) \n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| cyl| am|  n|\n|---:|--:|--:|\n|   4|  0|  3|\n|   4|  1|  8|\n|   6|  0|  4|\n|   6|  1|  3|\n|   8|  0| 12|\n|   8|  1|  2|\n\n</div>\n:::\n:::\n\n\n## Tables with dplyr: `pivot_wider()` {.smaller}\n\n`pivot_wider()`:\\\ncreates separate variables from the levels of a factor variable and the values of a second variable\n\n##  {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars %>% count(cyl, am)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| cyl| am|  n|\n|---:|--:|--:|\n|   4|  0|  3|\n|   4|  1|  8|\n|   6|  0|  4|\n|   6|  1|  3|\n|   8|  0| 12|\n|   8|  1|  2|\n\n</div>\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars %>% count(cyl, am) %>%\n  pivot_wider(names_from = \"am\", values_from = \"n\")\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| cyl|  0|  1|\n|---:|--:|--:|\n|   4|  3|  8|\n|   6|  4|  3|\n|   8| 12|  2|\n\n</div>\n:::\n:::\n\n\n## Tables with dplyr: A bit nicer!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars %>% \n  mutate(am = factor(am, labels = c(\"Manual\", \"Automatic\"))) %>%\n  count(cyl, am) %>% \n  pivot_wider(names_from = \"am\", values_from = \"n\") %>%\n  rename(\"Cylinders\" = \"cyl\")\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| Cylinders| Manual| Automatic|\n|---------:|------:|---------:|\n|         4|      3|         8|\n|         6|      4|         3|\n|         8|     12|         2|\n\n</div>\n:::\n:::\n\n\n## Task\n\nRecreate the previous task. This time using dplyr:\n\n-   Take the `heights` dataset from the `dslabs` library.\\\n-   Create a cross table depicting: The percentage of females and males that are above and below a height of 170 cm.\n\nThis is a hard task ...\n\nHint 1: `ifelse(height * 2.54 <= 170, \"size_a\", \"size_b\")`\\\nHint 2:\\\n`size_a / (size_a + size_b) * 100`\\\n`size_b / (size_a + size_b) * 100`\\\nare the row proportions.\n\n## \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dslabs)\n\nheights %>%\n  mutate(category = ifelse(height * 2.54 <= 170, \"size_a\", \"size_b\")) %>% \n  count(sex, category) %>%\n  pivot_wider(names_from = \"category\", values_from = \"n\") %>%\n  mutate(\n    \"% <= 170\" = size_a / (size_a + size_b) * 100,\n    \"% > 170\" = size_b / (size_a + size_b) * 100,\n    across(where(is.numeric), round, 1)\n  ) %>%\n  select(1, 4, 5)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|sex    | % <= 170| % > 170|\n|:------|--------:|-------:|\n|Female |     71.0|    29.0|\n|Male   |     19.8|    80.2|\n\n</div>\n:::\n:::\n\n\n## Tables with dplyr: For values of a third variable\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars %>% \n  mutate(am = factor(am, labels = c(\"Manual\", \"Automatic\"))) %>%\n  group_by(cyl, am) %>% \n  summarise(\n    n = n(), \n    M = mean(mpg), \n    SD = sd(mpg)\n  ) \n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| cyl|am        |  n|        M|        SD|\n|---:|:---------|--:|--------:|---------:|\n|   4|Manual    |  3| 22.90000| 1.4525839|\n|   4|Automatic |  8| 28.07500| 4.4838599|\n|   6|Manual    |  4| 19.12500| 1.6317169|\n|   6|Automatic |  3| 20.56667| 0.7505553|\n|   8|Manual    | 12| 15.05000| 2.7743959|\n|   8|Automatic |  2| 15.40000| 0.5656854|\n\n</div>\n:::\n:::\n\n\n## \n\n`pivot_wider()` can take values from several variables:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars %>% \n  mutate(am = factor(am, labels = c(\"Manual\", \"Automatic\"))) %>%\n  group_by(cyl, am) %>% \n  summarise(n = n(), M = mean(mpg), SD = sd(mpg)) %>%\n  pivot_wider(names_from = \"am\", values_from = c(\"n\", \"M\", \"SD\")) %>%\n  round(1)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| cyl| n_Manual| n_Automatic| M_Manual| M_Automatic| SD_Manual| SD_Automatic|\n|---:|--------:|-----------:|--------:|-----------:|---------:|------------:|\n|   4|        3|           8|     22.9|        28.1|       1.5|          4.5|\n|   6|        4|           3|     19.1|        20.6|       1.6|          0.8|\n|   8|       12|           2|     15.1|        15.4|       2.8|          0.6|\n\n</div>\n:::\n:::\n\n\n## \n\nSet argument `names_vary = \"slowest\"` for a different ordering of variables:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars %>% \n  mutate(am = factor(am, labels = c(\"Manual\", \"Automatic\"))) %>%\n  group_by(cyl, am) %>% \n  summarise(n = n(), M = mean(mpg), SD = sd(mpg)) %>%\n  pivot_wider(names_from = \"am\", values_from = c(\"n\", \"M\", \"SD\"), names_vary = \"slowest\") %>%\n  round(1)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| cyl| n_Manual| M_Manual| SD_Manual| n_Automatic| M_Automatic| SD_Automatic|\n|---:|--------:|--------:|---------:|-----------:|-----------:|------------:|\n|   4|        3|     22.9|       1.5|           8|        28.1|          4.5|\n|   6|        4|     19.1|       1.6|           3|        20.6|          0.8|\n|   8|       12|     15.1|       2.8|           2|        15.4|          0.6|\n\n</div>\n:::\n:::\n\n\n## Task\n\n-   Take the `storms` dataset and calculate n and mean of the wind speed (`wind`) by month (`month`) and storm classification (`status`) in a crosstable.\n\n## \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstorms %>% \n  group_by(month, status) %>%\n  summarise(\n    n = n(),\n    M = mean(wind, na.rm = TRUE)\n  ) %>%\n  pivot_wider(names_from = \"status\", values_from = c(\"n\", \"M\")) %>%\n  round()\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| month| n_extratropical| n_hurricane| n_other low| n_subtropical storm| n_tropical depression| n_tropical storm| n_subtropical depression| n_disturbance| n_tropical wave| M_extratropical| M_hurricane| M_other low| M_subtropical storm| M_tropical depression| M_tropical storm| M_subtropical depression| M_disturbance| M_tropical wave|\n|-----:|---------------:|-----------:|-----------:|-------------------:|---------------------:|----------------:|------------------------:|-------------:|---------------:|---------------:|-----------:|-----------:|-------------------:|---------------------:|----------------:|------------------------:|-------------:|---------------:|\n|     1|              29|           5|           5|                   6|                     2|               23|                       NA|            NA|              NA|              54|          70|          25|                  48|                    30|               48|                       NA|            NA|              NA|\n|     4|              40|          NA|          NA|                   3|                     1|               18|                        4|            NA|              NA|              38|          NA|          NA|                  43|                    30|               43|                       30|            NA|              NA|\n|     5|              18|          NA|          49|                  20|                    49|               60|                        5|            NA|              NA|              42|          NA|          29|                  40|                    29|               42|                       30|            NA|              NA|\n|     6|             130|          18|          84|                  12|                   213|              282|                       35|            35|              NA|              36|          70|          24|                  40|                    27|               44|                       26|            35|              NA|\n|     7|             135|         221|         181|                   6|                   399|              645|                       11|            46|               7|              36|          81|          23|                  35|                    26|               46|                       23|            30|              34|\n|     8|             275|        1038|         319|                  23|                   975|             1696|                       36|            25|              55|              36|          86|          25|                  40|                    27|               45|                       24|            31|              27|\n|     9|             800|        2464|         473|                  72|                  1331|             2522|                       34|            41|              41|              43|          89|          27|                  40|                    28|               46|                       28|            26|              30|\n|    10|             527|         803|         226|                  66|                   429|             1049|                       22|            16|              NA|              42|          85|          26|                  47|                    28|               46|                       29|            31|              NA|\n|    11|             183|         221|          85|                  48|                   149|              464|                        4|             8|               8|              47|          82|          25|                  47|                    28|               48|                       30|            24|              28|\n|    12|              14|          33|          31|                  42|                    21|               71|                       NA|            NA|              NA|              44|          68|          28|                  52|                    30|               44|                       NA|            NA|              NA|\n\n</div>\n:::\n:::\n\n\n## Design example:\n\nReplicate and try to understand the following table example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(kableExtra)\ntab <- mtcars %>% \n  group_by(cyl, am) %>% \n  summarise(n = n(), M = mean(mpg), SD = sd(mpg)) %>%\n  pivot_wider(names_from = \"am\", values_from = c(\"n\", \"M\", \"SD\"), names_vary = \"slowest\") \n\nnames(tab) <- c(\"Cylinders\", \"n\", \"M\", \"SD\", \"n\", \"M\", \"SD\")\n\nkable(tab, \n  caption =  \"Table 1.<br>Miles per gallon by cylinders and gearshift\", \n  digits = 1, \n  full_width = FALSE\n) %>% \n  kable_classic() %>%\n  add_header_above(c(\" \" = 1, \"Automatic\" = 3, \"Manual\" = 3))\n```\n:::\n\n\n## \n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-classic\" style='font-family: \"Arial Narrow\", \"Source Sans Pro\", sans-serif; margin-left: auto; margin-right: auto;'>\n<caption>Table 1.<br>Miles per gallon by cylinders and gearshift</caption>\n <thead>\n<tr>\n<th style=\"empty-cells: hide;\" colspan=\"1\"></th>\n<th style=\"padding-bottom:0; padding-left:3px;padding-right:3px;text-align: center; \" colspan=\"3\"><div style=\"border-bottom: 1px solid #111111; margin-bottom: -1px; \">Automatic</div></th>\n<th style=\"padding-bottom:0; padding-left:3px;padding-right:3px;text-align: center; \" colspan=\"3\"><div style=\"border-bottom: 1px solid #111111; margin-bottom: -1px; \">Manual</div></th>\n</tr>\n  <tr>\n   <th style=\"text-align:right;\"> Cylinders </th>\n   <th style=\"text-align:right;\"> n </th>\n   <th style=\"text-align:right;\"> M </th>\n   <th style=\"text-align:right;\"> SD </th>\n   <th style=\"text-align:right;\"> n </th>\n   <th style=\"text-align:right;\"> M </th>\n   <th style=\"text-align:right;\"> SD </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 4 </td>\n   <td style=\"text-align:right;\"> 3 </td>\n   <td style=\"text-align:right;\"> 22.9 </td>\n   <td style=\"text-align:right;\"> 1.5 </td>\n   <td style=\"text-align:right;\"> 8 </td>\n   <td style=\"text-align:right;\"> 28.1 </td>\n   <td style=\"text-align:right;\"> 4.5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 6 </td>\n   <td style=\"text-align:right;\"> 4 </td>\n   <td style=\"text-align:right;\"> 19.1 </td>\n   <td style=\"text-align:right;\"> 1.6 </td>\n   <td style=\"text-align:right;\"> 3 </td>\n   <td style=\"text-align:right;\"> 20.6 </td>\n   <td style=\"text-align:right;\"> 0.8 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 8 </td>\n   <td style=\"text-align:right;\"> 12 </td>\n   <td style=\"text-align:right;\"> 15.1 </td>\n   <td style=\"text-align:right;\"> 2.8 </td>\n   <td style=\"text-align:right;\"> 2 </td>\n   <td style=\"text-align:right;\"> 15.4 </td>\n   <td style=\"text-align:right;\"> 0.6 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n# Inferential statistics {background-image=\"images/bg-h1-3.jpg\"}\n\n## Some statistical functions:\n\n-   `t.test()`: Calculating a t-test.\n\n-   `wilcox.test()`: Calculating Wilcox test / U-Test.\n\n-   `chisq.test()`: Calculating a Pearson $X^2$-test.\n\n-   Some more we will not address today:\n\n    -   `lm()`: Regression analyses\n    -   `cor.test()`: Calculating a correlation test.\n    -   `binom.test()`: Binomial test.\n    -   `fisher.test()`: Fisher exact test for count data.\n    -   `ks.test()`: One and two sample Kolmogorov-Smirnov Tests.\n    -   `shapiro.test()`: Shapiro-Wilk Normality Test.\n    -   `aov()`: Analysis of variance\n\n## `chisq.test()`\n\n-   *Pearson's* $X^2$ test is a very versatile test to calculate whether a distribution of observed frequencies equates expected frequencies.\\\n-   A very common application is to test whether frequencies of observations in two variables are related. (E.g. number of patients that improved in a treatment vs. control group).\n-   The `chisq.test()` functions takes a two dimensional frequency table and calculates a $X^2$ test.\n\n## Example with data from an intervention study {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# get an external data example\ndat <- read.csv(\"https://goo.gl/j6lRXD\")\n# Create a two distribution table\ntab <- table(dat$treatment, dat$improvement)\ntab\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             \n              improved not-improved\n  not-treated       26           29\n  treated           35           15\n```\n\n\n:::\n\n```{.r .cell-code}\n# Test for non random distribution:\nchisq.test(tab) # Alternatively: chisq.test(dat$treatment, dat$improvement)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tPearson's Chi-squared test with Yates' continuity correction\n\ndata:  tab\nX-squared = 4.6626, df = 1, p-value = 0.03083\n```\n\n\n:::\n:::\n\n\nSignificantly more patients improved in the treatment condition ($X^2(1)=4.7, p < .05$)\n\n## Task\n\n-   Take the `starwars` dataset from the `tidyverse` package.\n-   Use `table()` to get the distribution `eye_color` by `hair_color`\n-   Apply the `chisq.test()` to calculate a X² test to test for an even distribution.\n\n\n[**:-)**]{style=\"color: red;\"}\n\n\n## \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntab <- table(starwars$eye_color, starwars$hair_color)\nchisq.test(tab)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tPearson's Chi-squared test\n\ndata:  tab\nX-squared = 185.19, df = 140, p-value = 0.006316\n```\n\n\n:::\n:::\n\n\n## `t.test()`\n\n-   *Student's t-test* analysis whether two samples originate from the same normal distribution.\\\n\n-   It is used to test for mean differences in two groups.\\\n\n-   ***Arguments*** of the `t.test()` function:\n\n    -   `x` and `y`: Each variable provides data from a samples.\n    -   `formula`: If you have one vector with all data (e.g. `values`) and a second vector with grouping information (e.g. `group`) use: `values ~ group`.\n    -   `data`: If you work with `formula`: The name of a data frame.\n    -   `paired`: If set `TRUE`, the test assumes repeated measures of one sample instead of two independent samples.\n\n## Example\n\nDoes one of two drugs increase hours of sleep better?\n\n`extra`: change in sleep duration, `group` : drug given\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsleep\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| extra|group |ID |\n|-----:|:-----|:--|\n|   0.7|1     |1  |\n|  -1.6|1     |2  |\n|  -0.2|1     |3  |\n|  -1.2|1     |4  |\n|  -0.1|1     |5  |\n|   3.4|1     |6  |\n|   3.7|1     |7  |\n|   0.8|1     |8  |\n|   0.0|1     |9  |\n|   2.0|1     |10 |\n|   1.9|2     |1  |\n|   0.8|2     |2  |\n|   1.1|2     |3  |\n|   0.1|2     |4  |\n|  -0.1|2     |5  |\n|   4.4|2     |6  |\n|   5.5|2     |7  |\n|   1.6|2     |8  |\n|   4.6|2     |9  |\n|   3.4|2     |10 |\n\n</div>\n:::\n:::\n\n\n## Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Applying a T-test by providing x and y\nx <- sleep$extra[sleep$group == 1]\ny <- sleep$extra[sleep$group == 2]\nt.test(x, y)\n\n# Applying a T-test with a formula\nt.test(extra ~ group, data = sleep)\n```\n:::\n\n\n## Example\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tWelch Two Sample t-test\n\ndata:  extra by group\nt = -1.8608, df = 17.776, p-value = 0.07939\nalternative hypothesis: true difference in means between group 1 and group 2 is not equal to 0\n95 percent confidence interval:\n -3.3654832  0.2054832\nsample estimates:\nmean in group 1 mean in group 2 \n           0.75            2.33 \n```\n\n\n:::\n:::\n\n\nGroup 2 shows an increase in sleep length of $\\Delta M=1.58$ ($t(17.8)=1.86, p = .08$)\n\n## `wilcox.test()`\n\n-   Calculates a Wilcoxon rank sum test. Also known as Mann Whitney U-Test\n-   This test is applied as an alternative to a t-Test when data are assumed to be non-normal distributed.\n-   It takes the same arguments as `t.test()`\n\n## Task\n\n-   Take the `sleep` dataset from the previous example.\n-   Calculate the `median` and `mad` (Median absolute deviation) for `extra` for each group.\n-   Calculate a Wilcoxon test with the `sleep` dataset on the effectiveness of the intervention.\n\n\n[**:-)**]{style=\"color: red;\"}\n\n\n##  {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nsleep %>% group_by(group) %>%\n  summarise(\n    median = median(extra), \n    mad = mad(extra)\n  )\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|group | median|     mad|\n|:-----|------:|-------:|\n|1     |   0.35| 1.55673|\n|2     |   1.75| 2.44629|\n\n</div>\n:::\n\n```{.r .cell-code}\nwilcox.test(extra~group, data = sleep)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tWilcoxon rank sum test with continuity correction\n\ndata:  extra by group\nW = 25.5, p-value = 0.06933\nalternative hypothesis: true location shift is not equal to 0\n```\n\n\n:::\n:::\n\n\n## Task\n\n-   Install the \"dslabs\" package\n-   Take the `gapminder` dataset. This dataset includes health and income outcomes for 184 countries from 1960 to 2016.\n-   It includes `infant_mortality`, `region` and `continent`.\n-   Calculate the mean and median `infant_mortality` for each continent\n-   Calculate a t-test comparing `infant_mortality` between the regions Southern- and Eastern Europe.\n\n\n[**:-)**]{style=\"color: red;\"}\n\n\n## \n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"dslabs\")\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dslabs)\ngapminder %>% group_by(continent) %>% \n  summarise(\n    mean = mean(infant_mortality, na.rm = TRUE),\n    median = median(infant_mortality, na.rm = TRUE)\n  )\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|continent |     mean| median|\n|:---------|--------:|------:|\n|Africa    | 95.12395|  93.40|\n|Americas  | 42.88145|  30.80|\n|Asia      | 55.26174|  43.10|\n|Europe    | 15.33022|  11.25|\n|Oceania   | 39.10136|  29.10|\n\n</div>\n:::\n:::\n\n\n## \n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- gapminder %>% filter(region == \"Southern Europe\") %>% select(infant_mortality)\ny <- gapminder %>% filter(region == \"Eastern Europe\") %>% select(infant_mortality)\nt.test(x, y)\n\n# or with pipes\ngapminder %>% \n  filter(region %in% c(\"Southern Europe\", \"Eastern Europe\")) %>%\n  t.test(infant_mortality ~ region, data = .)\n```\n:::\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tWelch Two Sample t-test\n\ndata:  infant_mortality by region\nt = 0.53658, df = 929.22, p-value = 0.5917\nalternative hypothesis: true difference in means between group Eastern Europe and group Southern Europe is not equal to 0\n95 percent confidence interval:\n -1.471847  2.579544\nsample estimates:\n mean in group Eastern Europe mean in group Southern Europe \n                     20.36164                      19.80779 \n```\n\n\n:::\n:::\n\n",
    "supporting": [
      "05-Statistics_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"05-Statistics_files/libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"05-Statistics_files/libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}