---
title: "R Basic Concepts"
format: revealjs
---

## Goals

-   Basic concepts of the R language
-   Object types: numbers, logic values, characters
-   object structures: vectors, factors, data frames, lists

# Basic concepts {background-image="images/bg-h1-3.jpg"}

## Functions {.smaller}

::: incremental
-   With a *function* you command the computer to do something.
-   *functions* have a function name (e.g., `mean`, `sqrt`).
-   *functions* take **arguments** to specify what to do.
-   *arguments* have argument names as well.
-   functions **always** consist of a function name followed by brackets.
:::

. . .

`function_name(argument_name_1 = value, argument_2 = value, ...)`

## Examples

`sqrt()` calculates the square root

```{r}
sqrt(x = 16)
```

. . .

You can omit the argument name if it is the first argument

```{r}
sqrt(16)
```

. . .

Even without arguments you still need the brackets

```{r }
date()
```

## Comments

It is good practice to add comments and notes to your code.\
Everything that is written behind a `#` will not be executed as code.\
If you want a comment to span across several line, you have to begin each line with a `#` symbol.

```{r}
# This is a comment
# across multiple lines
```

Within RStudio, you can use comments to create headers by ending a comment line with four `-` signs:

```{r}
# section 2 ----
```

## 

You can jump through your code by the list a the bottom of your source panel or, after activating the outline panel, at the right of your source panel:

![](images/paste-0F60DB72.png)

## Help files

```{r eval=FALSE}
# Function
help("sqrt")

# Short cut
?sqrt
```

... or use the bottom-right help panel in R Studio

## Task {background-image="images/bg-task.png"}

:::task
Take a look at the `mean()` function (hint: use the `help()` function):\
What *arguments* could be specified?
:::

------------------------------------------------------------------------

```{r eval=FALSE}
help("mean")
?mean
```

![](images/paste-397F56B8.png)

## Operations

Operations are a special kind of functions that have a shortcut.

```{r results = "hide"}
# function `assign` and the short cut
assign(x = "y", value = 10)

y <- 10
```

.

```{r results = "hide"}
# function `+`
"+"(e1 = 10, e2 = 10)

10 + 10
```

.

```{r results = "hide"}
# function `print`
print(x = y)

y
```

## Objects

Objects have an object name and contain data.\
The data are assigned to an object with the `<-` or `=` operator.

```{r}
x <- 10
```

You can see the value(s) of an object with the `print()` function, or by just typing the object name:

```{r results = "hide"}
print(x)
x
```

------------------------------------------------------------------------

Objects can be used for operators and arguments in functions:

```{r results = "hide"}
x <- 16
y <- 13

x * y
sqrt(x)
```

You can write the return values of a function into a new object:

```{r results = "hide"}
z <- sqrt(x)
z
```

And you can combine these:

```{r results = "hide"}
exp(z) + sqrt(y)
```

## Task {background-image="images/bg-task.png"}

:::task
Assign the values `40 and 24` to the variables `a and b`.\
Calculate the square root of the sum of `a and b`.
:::

## Task - solution {background-image="images/bg-task.png"}

:::task
Assign the values `40 and 24` to the variables `a and b`.\
Calculate the square root of the sum of `a and b`.
:::

```{r}
a <- 40
b <- 24
sqrt(a + b)
```

# Data classes {background-image="images/bg-h1-3.jpg"}

## Data types

The data of objects can be numbers, text or TRUE/FALSE values. These are called **data types**

-   **Numeric**: e.g. Integer or decimal numbers `1, 1.35`
-   **Character**: Always between " " or ' ' signs: `"Doctor", 'House'`
-   **Logical**: `TRUE, FALSE`

```{r}
x <- 10
y <- "Hello world!"
z <- FALSE
```

## Data structures

Data are organized in structures:

::: incremental
-   **Vectors**: A series of elements of the same data type.
-   **List**: A series of elements, each element can be of any data type or data structure.
-   **Data Frames**: A list with one vector for each element and all vectors of the same length
-   **Matrix**: A two dimensional table with values of the same data type.
-   **Array**: Like a matrix but with more dimensions.
:::

## Data structures

Data are organized in structures:

-   [**Vectors**: A series of elements of the same data type.]{.em}
-   [**List**: A series of elements, each element can be of any data type or data structure.]{.em}
-   [**Data Frames**: A list with one vector for each element and all vectors of the same length.]{.em}
-   **Matrix**: A two dimensional table with values of the same data type.
-   **Array**: Like a matrix but with more dimensions.

# Vectors {background-image="images/bg-h1-3.jpg"}

## How to build a vector

You create a vector with the `c()` function:

```{r}
c(2, 4, 6, 3, 7)
y <- c(2, 4, 6, 3, 7)
y
```

------------------------------------------------------------------------

The colon `:` operator creates a numerical sequence:

```{r}
1:10
```

This is a shortcut for `seq(1, 10)`

------------------------------------------------------------------------

You can build a vector of any data type:

```{r}
firstname <- c("Dustin", "Mike", "Will")
curly <- c(TRUE, FALSE, FALSE)
age <- c(9, 11, 10)
```

But do not mix data types in a vector. You will get an error or they are internally changed to fit one data type:

```{r}
age <- c("quite young", 10, 12, "very old")
age
```

Here `10` and `12` are changed to a character data type `"10"` and `"12"`.

## Task {.build background-image="images/bg-task.png"}

::: task
Create a vector (named `friends` comprising four names of your friends.
:::


## Task - solution {background-image="images/bg-task.png"}

::: task
Create a vector (named `friends` comprising four names of your friends.
:::

```{r}
friends <- c("Matthias", "Markus", "Thomas", "Christian")
```

## Combining vectors to new vectors {.build}

When an object is a vector it can be reused within the `c()` function to build a new vector:

```{r}
x <- c(3, 5, 7)
c(x, 5, 8, 9)

```

## Combining vectors to new vectors {.build}

Be careful not to confuse an object name with a character:

```{r error = TRUE}
x <- c("A", "B", "C")
c("x", "D", "E", "F")
c(x, "D", "E", "F")
c(A, B, C)

```

## Task {background-image="images/bg-task.png"}

::: task
- Create two vectors:<br>`x <- c("I", "am", "a")` and `y <- "person!"`
- Now create a new vector by reusing `x` and `y` that looks like this when printed:<br>`[1] "I"      "Am"     "a"      "cool"   "person!"`
:::

## Task - solution {background-image="images/bg-task.png"}

```{r}
x <- c("I", "am", "a")
y <- "person!"
c(x, "cool", y)
```

Use the `paste()` function to create a single string.  
The argument `collapse` defines a character string to set between elements:

```{r}
paste(c(x, "cool", y), collapse = " ")
```


## Missing values

A missing value is represented with `NA` (**N**ot **A**vailable).

```{r}
age <- c(9, NA, 11)
name <- c("Tick", "Trick", NA)
age
name

```

## Task {background-image="images/bg-task.png"}

::: task
1. Create a vector with the values  
   `2, 5, 7, 4, 7, 2, 6`. 
2. Create a vector with the values  
   `2, NA, 7, 4, NA, 2, 6`. 
3. Calculate the `mean` of these two vectors.  
4. Note: Use the `mean()` function to calculate the mean.  
   Note: Read through `?mean` if you encounter problems.
:::

## Task - solution {background-image="images/bg-task.png"}

```{r}
x1 <- c(2, 5, 7, 4, 7, 2, 6)
x2 <- c(2, NA, 7, 4, NA, 2, 6)

mean(x1)
mean(x2)
mean(x2, na.rm = TRUE)
```

## Named vectors

A named vector is a vector with a name for each element:

```{r}
age <- c(James = 34, Hella = 30, Armin = 43)
age
glasses <- c(James = TRUE, Hella = FALSE, Armin = TRUE)
glasses
```

You get and set the names of a named object with the `names()` argument:

```{r}
names(age)
names(age) <- c("Judith", "Jerom", "Klaus")
age
```

## Converting vectors

the `as` functions convert vectors between data types:

```{r}
as.character(1:5)
as.numeric(c(FALSE, TRUE, FALSE))
as.logical(c(0,1,0,1,1))
as.numeric(c("4711", "0814", "007"))
```

. . .

But unexpected results may occure:

```{r}
as.numeric(c("1", "2", "3.1", "3,2"))
as.logical(c(1,0,1,0,1,3))
```

# Factors {background-image="images/bg-h1-3.jpg"}

## A factor

A factor is a vector with labels for vector levels.\
A factor is created with the `factor()` function.  
The `levels` argument defines the possible factor levels.  
The `labels` argument defines the corresponding labels.

Example:

```{r}
sen <- factor(
  c(1, 0, 1, 0, 0, 0), 
  levels =  c(0, 1, 2), 
  labels = c("Without_SEN", "With_SEN", "unclear")
)
sen
```

## Task {background-image="images/bg-task.png"}

:::task
Build a factor for `gender` with the labels `male, female, non-binary`. Include a vector for six fictitious gender values.
:::


## Task - solution {background-image="images/bg-task.png"}

:::task
Build a factor for `gender` with the labels `male, female, non-binary`. Include a vector for six fictitious gender values.
:::

```{r}
gender <- factor(
  c(1, 3, 2, 1, 2, 1), 
  levels = 1:3, 
  labels = c("male", "female", "non-binary")
)
gender
```

# Data frames {background-image="images/bg-h1-3.jpg"}

## How to build a data frame {.build .smaller}

Data frames are the standard object for storing research data. They contain variables (columns) and cases (rows). A data frame is created with the `data.frame()` function.

```{r}
# For better convenience I have inserted additional linebreaks and spaces
study <- data.frame(
  sen    = c(0, 1, 0, 1, 0, 1),
  gender = c("M", "M", "F", "M", "F", "F"),
  age    = c(12, 13, 11, 10, 11, 14),
  IQ     = c(90, 85, 90, 87, 99, 89)
)
study
```

## Extracting a variable from a data frame

Variables within a data frame are extracted with double square brackets.

```{r}
study[["sen"]]
study[["IQ"]]
```

An alternative approach is to use the `$` sign: 

```{r}
study$sen
```

# Lists {background-image="images/bg-h1-3.jpg"}

## How to construct a list

Lists are the most versatile data structures in R and are very important for understanding R.

A list is a series of elements with arbitrary data types and structures. A list is constructed with the `list()` function

```{r}
list(1:3, "Hallo!", TRUE)
```

##

It is best to name list elements:

```{r}
my_list <- list(
  numbers = 1:3,  
  string = "Hallo!", 
  logical = TRUE
)
my_list
```

## Extracting list elements

You can extract a list element with `[[` or `$` signs:

```{r}
my_list[["numbers"]]
my_list[[1]]
my_list$numbers
```

##

lists can be very complex with lists nested in lists:


```{r}
complex_list <- list(
  list = list(A = 1, B = 1:3),
  list_in_list = list(C = list(D = 4), E = 5)
)
complex_list
```

## 

The `str()` function returns the structure of an R object

```{r}
str(complex_list)
```

