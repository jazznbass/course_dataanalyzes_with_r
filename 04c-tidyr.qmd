---
title: "Transform a data frame"
format: revealjs
---

```{r setup, include=FALSE}
library(tidyverse)
```

# From wide to long {background-image="images/bg-h1-3.jpg"}

## `pivot_longer()`

-   `cols`: The columns to be aggregated into a new variable].\
-   `names_to`: The name of the new variable containing the names of the aggregated columns.\
-   `values_to`: The name of the variable containing the values of the aggregated columns.

## 

::: left
**Wide format:**

```{r echo=FALSE}
df <- data.frame(player=c('A', 'B', 'C', 'D'),
                 year1=c(12, 15, 19, 19),
                 year2=c(22, 29, 18, 12))
df
```
:::

::: right
**Long format:**

```{r}
pivot_longer(
  df, 
  cols = 2:3, 
  names_to = 'year', 
  values_to = 'points'
)
```
:::

## Task {.smaller}

Take the `billboard` dataset (package tidyverse/tidyr). It looks like this:

```{r echo = FALSE}
billboard %>% head(10)
```

##  {.smaller}

Use the `pivot_longer()` function to create a dataset that looks like this:

```{r echo = FALSE}
billboard %>%
  pivot_longer(starts_with("wk"), names_to = "week", values_to = "position", values_drop_na = TRUE) %>% head(20)
```

## 

```{r}
billboard %>%
  pivot_longer(starts_with("wk"), names_to = "week", 
               values_to = "position", values_drop_na = TRUE)
```

##  {.smaller}

::: left
**Wide format:**

```{r echo=FALSE, collapse=FALSE}
n <- 30
df <- data.frame(id=1:n,
                 dia=sample(130:150, n, replace = TRUE),
                 sys=sample(90:100, n, replace = TRUE),
                 anxious = sample(1:5, n, replace = TRUE),
                 happy = sample(1:5, n, replace = TRUE),
                 sad = sample(1:5, n, replace = TRUE)
                 )
df$dia <- df$dia + df$anxious * 10 - df$happy *10
df$sys <- df$sys + df$anxious * 7 - df$happy *7
df
```
:::

::: right
```{r}
df %>%
  pivot_longer(cols = 2:3, 
               names_to = 'bp_type', 
               values_to = 'pressure') %>%
  pivot_longer(cols = c("anxious", "happy", "sad"), 
               names_to = 'emotion', 
               values_to = 'emotion_value')
```
:::

## Task: Create this plot:

```{r echo = FALSE}
df %>%
  pivot_longer(cols = 2:3, 
               names_to = 'bp_type', 
               values_to = 'pressure') %>%
  pivot_longer(cols = c("anxious", "happy", "sad"), 
               names_to = 'emotion', 
               values_to = 'emotion_value') %>%
  ggplot(aes(x = emotion, y = pressure, color = bp_type, size = emotion_value)) +
    geom_jitter(width = 0.2)
```

------------------------------------------------------------------------

-   Load the dataset with:

``` r
download.file(
  "https://raw.githubusercontent.com/jazznbass/datasets/main/bp_example.csv", 
  destfile = "example.csv", method = "curl"
)
df <- read.csv("example.csv")
```

-   Turn the data frame into a long format as described on the previous slide.
-   use ggplot with aesthetics: `x = emotion, y = pressure, color = bp_type, size = emotion_value`.
-   Add a jitter geom with width 0.2.

##  {.smaller}

::: left

**Step 1:**

```{r}
df_long <- df %>%
  pivot_longer(cols = 2:3, 
               names_to = 'bp_type', 
               values_to = 'pressure') %>%
  pivot_longer(cols = c("anxious", "happy", "sad"), 
               names_to = 'emotion', 
               values_to = 'emotion_value')
df_long
```
:::

. . .

::: right

**Step 2:**

```{r fig.height=3, fig.width=6}
ggplot(df_long, 
  aes(x = emotion, y = pressure, 
      color = bp_type, size = emotion_value)) +
  geom_jitter(width = 0.2)
```
:::

## Complex example {.smaller}

We have such a dataframe:

```{r echo = FALSE}
relig_income
```

## We want such a plot: {.smaller}

```{r echo = FALSE}
relig_income %>% 
  rowwise() %>%
  mutate(total = sum(c_across(2:11))) %>%
  ungroup() %>%
  filter(total >= 500) %>%
  mutate(across(2:11, ~ . / total * 100)) %>%
  pivot_longer(2:11, names_to = "income", values_to = "count") %>%
  mutate(income = factor(income, levels = names(relig_income)[2:11])) %>%
  ggplot(aes(x = income, y = count)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~religion) + 
  theme_classic() + 
  theme(axis.text.x = element_text(angle = 45, size = 7, hjust = 1)) +
  ylab("%")
```

## Step 1: Turn the count values into percentages: {.smaller}

::: left
```{r}
# with dplyr:
new_df <- relig_income %>% 
  rowwise() %>%
  mutate(total = sum(c_across(2:11))) %>%
  ungroup() %>%
  mutate(across(2:11, ~ . / total * 100)) %>%
  filter(total >= 500)
```
:::

::: right
```{r}
# with base R
new_df <- as.data.frame(relig_income)
new_df$total <- apply(new_df[, 2:11], 1, sum)
new_df <- new_df[new_df$total >= 500,]

for(i in 1:nrow(new_df))  
  new_df[i, 2:11] <- new_df[i, 2:11] / new_df$total[i] * 100
```
:::

```{r echo = FALSE}
new_df
```

## Step 2: Turn data into long format: {.smaller}

```{r}
# tidy R
new_long <- new_df %>%
  pivot_longer(col = 2:11, names_to = "income", values_to = "count")


#  base R:
new_long <- data.frame(
  religion = rep(NA, nrow(new_df) * 10), 
  income = rep(names(new_df)[2:11], nrow(new_df)), 
  count = rep(NA, nrow(new_df) * 10))

new_long$religion <- rep(new_df$religion, each = 10)

for(i in 1:nrow(new_df))
  new_long$count[((i-1)*10+1):((i-1)*10+10)] <- as.numeric(new_df[i, 2:11])

```

```{r echo = FALSE}
new_long
```

## Create the basic plot {.smaller}

```{r}
new_long %>%
  ggplot(aes(x = income, y = count)) +
  geom_col() +
  facet_wrap(~religion)
```

## Rotate the text and set a label {.smaller}

```{r}
new_long %>%
  ggplot(aes(x = income, y = count)) +
  geom_col() +
  facet_wrap(~religion) + 
  theme(axis.text.x = element_text(angle = 45, size = 7, hjust = 1)) +
  ylab("%")
```

## Reorder income {.smaller}

```{r}
new_long %>%
  mutate(income = factor(income, levels = names(relig_income)[2:11])) %>%
  ggplot(aes(x = income, y = count)) +
  geom_col() +
  facet_wrap(~religion) + 
  theme(axis.text.x = element_text(angle = 45, size = 7, hjust = 1)) +
  ylab("%")
```

## Set a nice theme {.smaller}

```{r}
new_long %>%
  mutate(income = factor(income, levels = names(relig_income)[2:11])) %>%
  ggplot(aes(x = income, y = count)) +
  geom_col() +
  facet_wrap(~religion) + 
  theme_classic() + 
  theme(axis.text.x = element_text(angle = 45, size = 7, hjust = 1)) +
  ylab("%")
```

# Join datasets {background-image="images/bg-h1-3.jpg"}

## `full_join()`

Joins to datasets:

-   `x` and `y`: Two dataset objects.
-   `by`: A columnname by which the datasets are joined.

## Example {.smaller}

::: left37
df_student:

```{r echo=FALSE}
n <- 12
df_student <- data.frame(
  age = sample(5:10, n, replace = TRUE),
  sex = sample(c("M", "F"), n, replace = TRUE),
  T_score = sample(30:70, n, replace = TRUE),
  class_id = rep(LETTERS[1:(n/3)], each = 3)
)
df_student
```

df_teacher:

```{r echo=FALSE}
n <- n/3
df_teacher <- data.frame(
  class_id = LETTERS[1:n],
  self_efficacy = sample(30:70, n, replace = TRUE)
)
df_teacher
```
:::

::: right37
```{r collapse = FALSE}
full_join(df_student, df_teacher, by = "class_id")
```
:::

## Example with duplicated names {.smaller}

::: left37
df_student:

```{r echo=FALSE}
df_student
```

df_teacher:

```{r echo=FALSE}
df_teacher <- data.frame(
  class_id = LETTERS[1:n],
  self_efficacy = sample(30:70, n, replace = TRUE),
  age = sample(25:65, n, replace = TRUE),
  sex = sample(c("M", "F"), n, replace = TRUE)
)
df_teacher
```
:::

::: right37
```{r collapse = FALSE}
full_join(df_student, df_teacher, by = "class_id")
```
:::

## Example {.smaller}

``` r
full_join(df_student, df_teacher, by = "class_id", suffix = c("_student", "_teacher"))
```

```{r echo = FALSE}
full_join(df_student, df_teacher, by = "class_id", suffix = c("_student", "_teacher")) 
```

## Task

-   Load the df_student and df_teacher dataset:

```{r}
download.file("https://raw.githubusercontent.com/jazznbass/datasets/main/df_student.csv", 
    destfile = "students.csv", method = "curl")
download.file("https://raw.githubusercontent.com/jazznbass/datasets/main/df_teacher.csv", 
    destfile = "teachers.csv", method = "curl")

df_students <- read.csv("students.csv")
df_teachers <- read.csv("teachers.csv")
```

-   join the two datasets by class id.
-   add for each student the average age and the proportion of males of the students of his class.

Hint: use group_by and summarise to calculate average age and proportions of males.

## Solution

```{r}
df <- full_join(df_students, df_teachers, by = "class_id", suffix = c("_student", "_teacher"))
```

```{r echo = FALSE}
df
```

------------------------------------------------------------------------

```{r}
df_add <- df %>% 
  group_by(class_id) %>% 
  summarise(
    average_age = mean(age_student, na.rm = TRUE),
    prop_male = mean(sex_student == "M") * 100
  )
```

```{r echo = FALSE}
df_add
```

##  {.smaller}

```{r}
df <- full_join(df, df_add, by = "class_id")
```

```{r echo=FALSE}
df
```
